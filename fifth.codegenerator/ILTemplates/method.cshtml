@using Fifth.CodeGeneration;
@using fifth.metamodel.metadata.il;
@using fifth.metamodel.metadata;
@inherits BaseTemplatePage<MethodDefinition>
@{

var tn = RenderTypeReference(Model.Signature.ReturnTypeSignature);

<text> .method</text>

switch (Model.Visibility)
{
    case MemberAccessability.Public:
        <text> public</text>
        break;
    default: // todo: generate other visibilities
        <text> protected</text>
        break;
}

if (Model.Signature.CallingConvention == MethodCallingConvention.Default)
{
    <text> static</text>
}

if (Model.Header.FunctionKind == FunctionKind.Getter || Model.Header.FunctionKind == FunctionKind.Setter)
{
        <text> hidebysig specialname</text>
}

<text>@tn @Model.Name (</text>

var sep = "";
foreach (var p in Model.Signature.ParameterSignatures)
{
    <text> @sep</text>
    await IncludeAsync("parameterSignature.cshtml", p);
    sep = ",";
}
<text> )</text>

if (Model.CodeTypeFlags == CodeTypeFlag.cil)
{
    <text> cil managed
    </text>
}

if (Model.Header.IsEntrypoint)
{
    <text> .entrypoint
    </text>
}
await IncludeAsync("locals.cshtml", Model.Impl.Body);
await IncludeAsync("block.cshtml", Model.Impl.Body);
}
