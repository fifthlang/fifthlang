use std, io, lob, env, string ;

alias <"http://xmlns.com/foaf/0.1/"> as foaf;
alias <"http://www.w3.org/1999/02/22-rdf-syntax-ns#"> as rdf;
alias <"http://www.lob.org/users"> as loborg;

// get user token using IRI in environment varible
user_id = io.get_user_token(env.get_var("LOB_USER_ID"));

// set the base RDF fact store to derive from the facts in the user graph at lob.com
// needs to be defined on entry, because success of main needs to translate into a
// commit of new facts into the ground state store
with ground_state = lob.store(loborg, user_id);

main() {
    new_address = get_new_address();
    if (!is_valid_address(new_address)) {
        exit("invalid address");
    };
    only_home? = get_is_only_home();
    if (only_home? ) {
        self.address.until = std.today();
    };
    new_address.from = std.today();
    self.address = new_address;
}

get_new_address(){
    a1 = io.ask("address 1");
    a2 = io.ask("address 2");
    t = io.ask("town");
    p = io.ask("postcode");
    r = io.ask("region");
    c = io.ask("country");
    return new lob.Address{
        address1 = a1,
        address2 = a2,
        town = t,
        postcode = p,
        region = r,
        country = c
    };
}

is_valid_address(lob.Address a){
    return string.non_empty(a.address1) && 
        string.non_empty(a.town) && 
        string.non_empty(a.region) && 
        string.non_empty(a.postcode) && 
        string.non_empty(a.country);
}

get_is_only_home(){
    x = io.ask("will this be your only home?");
    return std.to_boolean(x);
}