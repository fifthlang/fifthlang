namespace Fifth.AST.Visitors
{
    using System;
    using Symbols;
    using Fifth.AST;
    using TypeSystem;
    using PrimitiveTypes;
    using TypeSystem.PrimitiveTypes;
    using System.Collections.Generic;

    public interface IAstVisitor
    {
<# foreach (var ast in asts)  { #>
        public void Enter<#= ast.Name #>(<#= ast.Name #> ctx);
        public void Leave<#= ast.Name #>(<#= ast.Name #> ctx);
<# } #>
    }

    public partial class BaseAstVisitor : IAstVisitor
    {
<# foreach (var ast in asts)  { #>
        public virtual void Enter<#= ast.Name #>(<#= ast.Name #> ctx){}
        public virtual void Leave<#= ast.Name #>(<#= ast.Name #> ctx){}
<# } #>
    }


    public interface IAstRecursiveDescentVisitor
    {
        public AstNode Visit(AstNode ctx);
<# foreach (var ast in asts)  { #>
        public <#= ast.Name #> Visit<#= ast.Name #>(<#= ast.Name #> ctx);
<# } #>
    }

    public class DefaultRecursiveDescentVisitor : IAstRecursiveDescentVisitor
    {
        public virtual AstNode Visit(AstNode ctx){
            if(ctx == null) return ctx;
            return ctx switch
            {
<# foreach (string astNodeType in asts.Select(a=>a.Name))  { #>
                <#= astNodeType #> node => Visit<#= astNodeType #>(node),
<# } #>

                { } node => null,
            };
        }

<# foreach (var ast in asts)  { #>
        public virtual <#= ast.Name #> Visit<#= ast.Name #>(<#= ast.Name #> ctx)
            => ctx;
<# } #>

    }

}
