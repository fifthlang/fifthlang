namespace Fifth.AST.Builders;

using System;
using Symbols;
using Visitors;
using TypeSystem;
using PrimitiveTypes;
using TypeSystem.PrimitiveTypes;
using System.Collections.Generic;

public interface INodeBuilder{}

<#
foreach (var ast in asts)  {
    var allProps = GenerationHelpers.GetPropertyListInherited(ast).Select(ps=>ps.Prop);

#>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "Generated Code")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Roslynator", "RCS1225:Make class sealed.", Justification = "Generated Code")]
    public partial class <#= ast.Name #>Builder : INodeBuilder
    {
        private <#= ast.Name #>Builder()
        {
<# foreach (var prop in allProps)  {
    if(prop.IsCollection){ #>
        _<#= prop.Name #> = <#= GenerationHelpers.PluralTypeInit(prop)#>;
<# } /*if is collection*/ #>
<# } /*for each prop*/ #>
        }

        public static <#= ast.Name #>Builder Create<#= ast.Name #>() => new ();
        public <#= ast.Name #> Build()
          => new (<#

var sep = "";
foreach (var prop in allProps)  {
#><#= sep #>_<#=prop.Name#><#
sep=", ";
} #>);

<# foreach (var prop in allProps)  { #>
        private <#= GenerationHelpers.PluralType(prop) #> _<#= prop.Name #>;
        public <#= ast.Name #>Builder With<#= prop.Name #>(<#= GenerationHelpers.PluralType(prop) #> value){
            _<#= prop.Name #> = value;
            return this;
        }

<#
    if (prop.IsCollection){#>
        public <#= ast.Name #>Builder AddingItemTo<#= prop.Name #>(<#= prop.InterfaceName ?? prop.Type #> value){
            _<#= prop.Name #>.Add(value);
            return this;
        }
<#    }  /*if (prop.IsCollection)*/ #>
<# } /* foreach prop */ #>
    }
<# } /*for each ast*/ #>
