//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from grammar/fifth.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class fifthParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OpenParen=1, CloseParen=2, Comma=3, LambdaSep=4, Use=5, Plus=6, Minus=7, 
		Times=8, Divide=9, Percent=10, Power=11, EQ=12, NEQ=13, GT=14, LT=15, 
		GEQ=16, LEQ=17, And=18, Or=19, Semicolon=20, Identifier=21, IdStart=22, 
		IdPart=23, TimeInterval=24, Letter=25, Digit=26, PositiveDigit=27, Nat=28, 
		String=29, Float=30, Int=31, Exp=32, Ws=33, VARIABLE=34, ScientificNumber=35;
	public const int
		RULE_fifth = 0, RULE_function_declaration = 1, RULE_function_args = 2, 
		RULE_function_body = 3, RULE_function_name = 4, RULE_expression_list = 5, 
		RULE_equation = 6, RULE_expression = 7, RULE_multiplying_expression = 8, 
		RULE_pow_expression = 9, RULE_relop = 10, RULE_signed_atom = 11, RULE_function_call = 12, 
		RULE_variable = 13, RULE_atom = 14, RULE_scientific = 15, RULE_formal_parameters = 16, 
		RULE_parameter_declaration = 17, RULE_parameter_type = 18, RULE_parameter_name = 19, 
		RULE_module_import = 20;
	public static readonly string[] ruleNames = {
		"fifth", "function_declaration", "function_args", "function_body", "function_name", 
		"expression_list", "equation", "expression", "multiplying_expression", 
		"pow_expression", "relop", "signed_atom", "function_call", "variable", 
		"atom", "scientific", "formal_parameters", "parameter_declaration", "parameter_type", 
		"parameter_name", "module_import"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "'=>'", "'use'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'^'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'&&'", "'||'", 
		"';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OpenParen", "CloseParen", "Comma", "LambdaSep", "Use", "Plus", 
		"Minus", "Times", "Divide", "Percent", "Power", "EQ", "NEQ", "GT", "LT", 
		"GEQ", "LEQ", "And", "Or", "Semicolon", "Identifier", "IdStart", "IdPart", 
		"TimeInterval", "Letter", "Digit", "PositiveDigit", "Nat", "String", "Float", 
		"Int", "Exp", "Ws", "VARIABLE", "ScientificNumber"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "fifth.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static fifthParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public fifthParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public fifthParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FifthContext : ParserRuleContext {
		public Module_importContext[] module_import() {
			return GetRuleContexts<Module_importContext>();
		}
		public Module_importContext module_import(int i) {
			return GetRuleContext<Module_importContext>(i);
		}
		public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		public FifthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fifth; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterFifth(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitFifth(this);
		}
	}

	[RuleVersion(0)]
	public FifthContext fifth() {
		FifthContext _localctx = new FifthContext(Context, State);
		EnterRule(_localctx, 0, RULE_fifth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Use) {
				{
				{
				State = 42; module_import();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 48; function_declaration();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Function_argsContext function_args() {
			return GetRuleContext<Function_argsContext>(0);
		}
		public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public ITerminalNode Semicolon() { return GetToken(fifthParser.Semicolon, 0); }
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_function_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; function_name();
			State = 55; function_args();
			State = 56; function_body();
			State = 57; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argsContext : ParserRuleContext {
		public ITerminalNode OpenParen() { return GetToken(fifthParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(fifthParser.CloseParen, 0); }
		public Formal_parametersContext formal_parameters() {
			return GetRuleContext<Formal_parametersContext>(0);
		}
		public Function_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterFunction_args(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitFunction_args(this);
		}
	}

	[RuleVersion(0)]
	public Function_argsContext function_args() {
		Function_argsContext _localctx = new Function_argsContext(Context, State);
		EnterRule(_localctx, 4, RULE_function_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(OpenParen);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 60; formal_parameters();
				}
			}

			State = 63; Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		public ITerminalNode LambdaSep() { return GetToken(fifthParser.LambdaSep, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_function_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(LambdaSep);
			State = 66; expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(fifthParser.Identifier, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 8, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(fifthParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(fifthParser.Comma, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; expression();
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 71; Match(Comma);
				State = 72; expression();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquationContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public EquationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterEquation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitEquation(this);
		}
	}

	[RuleVersion(0)]
	public EquationContext equation() {
		EquationContext _localctx = new EquationContext(Context, State);
		EnterRule(_localctx, 12, RULE_equation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; expression();
			State = 79; relop();
			State = 80; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Multiplying_expressionContext[] multiplying_expression() {
			return GetRuleContexts<Multiplying_expressionContext>();
		}
		public Multiplying_expressionContext multiplying_expression(int i) {
			return GetRuleContext<Multiplying_expressionContext>(i);
		}
		public ITerminalNode[] Plus() { return GetTokens(fifthParser.Plus); }
		public ITerminalNode Plus(int i) {
			return GetToken(fifthParser.Plus, i);
		}
		public ITerminalNode[] Minus() { return GetTokens(fifthParser.Minus); }
		public ITerminalNode Minus(int i) {
			return GetToken(fifthParser.Minus, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; multiplying_expression();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 83;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 84; multiplying_expression();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplying_expressionContext : ParserRuleContext {
		public Pow_expressionContext[] pow_expression() {
			return GetRuleContexts<Pow_expressionContext>();
		}
		public Pow_expressionContext pow_expression(int i) {
			return GetRuleContext<Pow_expressionContext>(i);
		}
		public ITerminalNode[] Times() { return GetTokens(fifthParser.Times); }
		public ITerminalNode Times(int i) {
			return GetToken(fifthParser.Times, i);
		}
		public ITerminalNode[] Divide() { return GetTokens(fifthParser.Divide); }
		public ITerminalNode Divide(int i) {
			return GetToken(fifthParser.Divide, i);
		}
		public Multiplying_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplying_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterMultiplying_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitMultiplying_expression(this);
		}
	}

	[RuleVersion(0)]
	public Multiplying_expressionContext multiplying_expression() {
		Multiplying_expressionContext _localctx = new Multiplying_expressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_multiplying_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; pow_expression();
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Times || _la==Divide) {
				{
				{
				State = 91;
				_la = TokenStream.LA(1);
				if ( !(_la==Times || _la==Divide) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 92; pow_expression();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pow_expressionContext : ParserRuleContext {
		public Signed_atomContext[] signed_atom() {
			return GetRuleContexts<Signed_atomContext>();
		}
		public Signed_atomContext signed_atom(int i) {
			return GetRuleContext<Signed_atomContext>(i);
		}
		public ITerminalNode[] Power() { return GetTokens(fifthParser.Power); }
		public ITerminalNode Power(int i) {
			return GetToken(fifthParser.Power, i);
		}
		public Pow_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pow_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterPow_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitPow_expression(this);
		}
	}

	[RuleVersion(0)]
	public Pow_expressionContext pow_expression() {
		Pow_expressionContext _localctx = new Pow_expressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_pow_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; signed_atom();
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Power) {
				{
				{
				State = 99; Match(Power);
				State = 100; signed_atom();
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(fifthParser.EQ, 0); }
		public ITerminalNode GT() { return GetToken(fifthParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(fifthParser.LT, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(Context, State);
		EnterRule(_localctx, 20, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << GT) | (1L << LT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_atomContext : ParserRuleContext {
		public ITerminalNode Plus() { return GetToken(fifthParser.Plus, 0); }
		public Signed_atomContext signed_atom() {
			return GetRuleContext<Signed_atomContext>(0);
		}
		public ITerminalNode Minus() { return GetToken(fifthParser.Minus, 0); }
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Signed_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterSigned_atom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitSigned_atom(this);
		}
	}

	[RuleVersion(0)]
	public Signed_atomContext signed_atom() {
		Signed_atomContext _localctx = new Signed_atomContext(Context, State);
		EnterRule(_localctx, 22, RULE_signed_atom);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; Match(Plus);
				State = 109; signed_atom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110; Match(Minus);
				State = 111; signed_atom();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; function_call();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113; atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(fifthParser.OpenParen, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CloseParen() { return GetToken(fifthParser.CloseParen, 0); }
		public ITerminalNode[] Comma() { return GetTokens(fifthParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(fifthParser.Comma, i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 24, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; function_name();
			State = 117; Match(OpenParen);
			State = 118; expression();
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 119; Match(Comma);
				State = 120; expression();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 126; Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(fifthParser.Identifier, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 26, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ScientificContext scientific() {
			return GetRuleContext<ScientificContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(fifthParser.OpenParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(fifthParser.CloseParen, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 28, RULE_atom);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ScientificNumber:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130; scientific();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131; variable();
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132; Match(OpenParen);
				State = 133; expression();
				State = 134; Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificContext : ParserRuleContext {
		public ITerminalNode ScientificNumber() { return GetToken(fifthParser.ScientificNumber, 0); }
		public ScientificContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientific; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterScientific(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitScientific(this);
		}
	}

	[RuleVersion(0)]
	public ScientificContext scientific() {
		ScientificContext _localctx = new ScientificContext(Context, State);
		EnterRule(_localctx, 30, RULE_scientific);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(ScientificNumber);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parametersContext : ParserRuleContext {
		public Parameter_declarationContext[] parameter_declaration() {
			return GetRuleContexts<Parameter_declarationContext>();
		}
		public Parameter_declarationContext parameter_declaration(int i) {
			return GetRuleContext<Parameter_declarationContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(fifthParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(fifthParser.Comma, i);
		}
		public Formal_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterFormal_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitFormal_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parametersContext formal_parameters() {
		Formal_parametersContext _localctx = new Formal_parametersContext(Context, State);
		EnterRule(_localctx, 32, RULE_formal_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; parameter_declaration();
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 141; Match(Comma);
				State = 142; parameter_declaration();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declarationContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(fifthParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(fifthParser.Identifier, i);
		}
		public Parameter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterParameter_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitParameter_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declarationContext parameter_declaration() {
		Parameter_declarationContext _localctx = new Parameter_declarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_parameter_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(Identifier);
			State = 149; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_typeContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(fifthParser.Identifier, 0); }
		public Parameter_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterParameter_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitParameter_type(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_typeContext parameter_type() {
		Parameter_typeContext _localctx = new Parameter_typeContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameter_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_nameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(fifthParser.Identifier, 0); }
		public Parameter_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterParameter_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitParameter_name(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_nameContext parameter_name() {
		Parameter_nameContext _localctx = new Parameter_nameContext(Context, State);
		EnterRule(_localctx, 38, RULE_parameter_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_importContext : ParserRuleContext {
		public ITerminalNode Use() { return GetToken(fifthParser.Use, 0); }
		public ITerminalNode Identifier() { return GetToken(fifthParser.Identifier, 0); }
		public ITerminalNode Semicolon() { return GetToken(fifthParser.Semicolon, 0); }
		public Module_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_import; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.EnterModule_import(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfifthListener typedListener = listener as IfifthListener;
			if (typedListener != null) typedListener.ExitModule_import(this);
		}
	}

	[RuleVersion(0)]
	public Module_importContext module_import() {
		Module_importContext _localctx = new Module_importContext(Context, State);
		EnterRule(_localctx, 40, RULE_module_import);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(Use);
			State = 156; Match(Identifier);
			State = 157; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '%', '\xA2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\a', '\x2', '.', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x31', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x34', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x37', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '@', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'L', '\n', '\a', '\f', 
		'\a', '\xE', '\a', 'O', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'X', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '[', '\v', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', '`', '\n', '\n', '\f', '\n', '\xE', '\n', '\x63', 
		'\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 'h', '\n', 
		'\v', '\f', '\v', '\xE', '\v', 'k', '\v', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', 'u', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '|', '\n', '\xE', '\f', 
		'\xE', '\xE', '\xE', '\x7F', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x8B', '\n', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\x92', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\x95', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x2', '\x2', '\x17', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		'\x2', '\x5', '\x3', '\x2', '\b', '\t', '\x3', '\x2', '\n', '\v', '\x4', 
		'\x2', '\xE', '\xE', '\x10', '\x11', '\x2', '\x9A', '\x2', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x38', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'=', '\x3', '\x2', '\x2', '\x2', '\b', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x46', '\x3', '\x2', '\x2', '\x2', '\f', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'P', '\x3', '\x2', '\x2', '\x2', '\x10', 'T', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\\', '\x3', '\x2', '\x2', '\x2', '\x14', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x16', 'l', '\x3', '\x2', '\x2', '\x2', '\x18', 
		't', '\x3', '\x2', '\x2', '\x2', '\x1A', 'v', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x82', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x8C', '\x3', '\x2', '\x2', '\x2', '\"', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x96', '\x3', '\x2', '\x2', '\x2', '&', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x9B', '\x3', '\x2', '\x2', '\x2', '*', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x5', '*', '\x16', '\x2', 
		'-', ',', '\x3', '\x2', '\x2', '\x2', '.', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x35', '\x3', '\x2', '\x2', '\x2', '\x31', '/', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\x5', '\x4', '\x3', '\x2', 
		'\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x5', '\n', 
		'\x6', '\x2', '\x39', ':', '\x5', '\x6', '\x4', '\x2', ':', ';', '\x5', 
		'\b', '\x5', '\x2', ';', '<', '\a', '\x16', '\x2', '\x2', '<', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '=', '?', '\a', '\x3', '\x2', '\x2', '>', 
		'@', '\x5', '\"', '\x12', '\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\a', '\x4', '\x2', '\x2', '\x42', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\x6', '\x2', '\x2', '\x44', 
		'\x45', '\x5', '\f', '\a', '\x2', '\x45', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'G', '\a', '\x17', '\x2', '\x2', 'G', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'M', '\x5', '\x10', '\t', '\x2', 'I', 'J', '\a', '\x5', '\x2', 
		'\x2', 'J', 'L', '\x5', '\x10', '\t', '\x2', 'K', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'O', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x5', '\x10', 
		'\t', '\x2', 'Q', 'R', '\x5', '\x16', '\f', '\x2', 'R', 'S', '\x5', '\x10', 
		'\t', '\x2', 'S', '\xF', '\x3', '\x2', '\x2', '\x2', 'T', 'Y', '\x5', 
		'\x12', '\n', '\x2', 'U', 'V', '\t', '\x2', '\x2', '\x2', 'V', 'X', '\x5', 
		'\x12', '\n', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', 
		'\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '\x11', '\x3', '\x2', '\x2', '\x2', '[', 'Y', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x61', '\x5', '\x14', '\v', '\x2', 
		']', '^', '\t', '\x3', '\x2', '\x2', '^', '`', '\x5', '\x14', '\v', '\x2', 
		'_', ']', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x13', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x64', 'i', '\x5', '\x18', '\r', 
		'\x2', '\x65', '\x66', '\a', '\r', '\x2', '\x2', '\x66', 'h', '\x5', '\x18', 
		'\r', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'h', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'j', '\x15', '\x3', '\x2', '\x2', '\x2', 'k', 'i', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'm', '\t', '\x4', '\x2', '\x2', 'm', 
		'\x17', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\b', '\x2', '\x2', 
		'o', 'u', '\x5', '\x18', '\r', '\x2', 'p', 'q', '\a', '\t', '\x2', '\x2', 
		'q', 'u', '\x5', '\x18', '\r', '\x2', 'r', 'u', '\x5', '\x1A', '\xE', 
		'\x2', 's', 'u', '\x5', '\x1E', '\x10', '\x2', 't', 'n', '\x3', '\x2', 
		'\x2', '\x2', 't', 'p', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', 
		'\x2', '\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 'u', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\x5', '\n', '\x6', '\x2', 'w', 'x', '\a', 
		'\x3', '\x2', '\x2', 'x', '}', '\x5', '\x10', '\t', '\x2', 'y', 'z', '\a', 
		'\x5', '\x2', '\x2', 'z', '|', '\x5', '\x10', '\t', '\x2', '{', 'y', '\x3', 
		'\x2', '\x2', '\x2', '|', '\x7F', '\x3', '\x2', '\x2', '\x2', '}', '{', 
		'\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\a', '\x4', '\x2', '\x2', '\x81', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x83', '\a', '\x17', '\x2', '\x2', '\x83', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x84', '\x8B', '\x5', ' ', '\x11', 
		'\x2', '\x85', '\x8B', '\x5', '\x1C', '\xF', '\x2', '\x86', '\x87', '\a', 
		'\x3', '\x2', '\x2', '\x87', '\x88', '\x5', '\x10', '\t', '\x2', '\x88', 
		'\x89', '\a', '\x4', '\x2', '\x2', '\x89', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x84', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x86', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', '%', '\x2', 
		'\x2', '\x8D', '!', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x93', '\x5', 
		'$', '\x13', '\x2', '\x8F', '\x90', '\a', '\x5', '\x2', '\x2', '\x90', 
		'\x92', '\x5', '$', '\x13', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x95', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x97', '\a', '\x17', '\x2', '\x2', '\x97', '\x98', '\a', 
		'\x17', '\x2', '\x2', '\x98', '%', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9A', '\a', '\x17', '\x2', '\x2', '\x9A', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\a', '\x17', '\x2', '\x2', '\x9C', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', '\a', '\x2', '\x2', '\x9E', 
		'\x9F', '\a', '\x17', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x16', '\x2', 
		'\x2', '\xA0', '+', '\x3', '\x2', '\x2', '\x2', '\r', '/', '\x35', '?', 
		'M', 'Y', '\x61', 'i', 't', '}', '\x8A', '\x93',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
