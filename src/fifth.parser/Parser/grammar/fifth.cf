entrypoints Fifth ;

FifthProgram. Fifth ::= [ModuleImport] [Alias] [Statement] [FunctionDeclaration] ;

AliasUri.   Alias ::=   "alias" UriConstant "as" PackageName ";";
Blk.        Block ::= "{" [Statement] "}" ;
FParam.     FormalParameter ::= ParamType ParamName ;
FuncDecl.   FunctionDeclaration ::= FunctionName "(" [FormalParameter] ")" Block ;
NFunc.      FunctionName ::= Ident ;
ModImp.     ModuleImport ::= "use" PackageName ";";
NPkg.       PackageName ::= Ident ;
NParam.     ParamName ::= VarName ;
TParam.     ParamType ::= TypeName ;
NQFunc.     QFunctionName ::= PackageName "." FunctionName ;
SAssign.    Statement ::= QVarName "=" Exp ;
SReturn.    Statement ::= "return" Exp ;
SIf.        Statement ::= "if" "(" Exp ")" Block ;
SIfElse.    Statement ::= "if" "(" Exp ")" Block "else" Block ;
SWith.      Statement ::= "with" Statement ;
SBareStmt.  Statement ::= Exp ;
UriConst.   UriConstant ::= "<" String ">" ;
rules       VarName ::= Ident | PIdent | UIdent ;
rules       QVarName ::= [VarName] ;
EAnd.       Exp ::= Exp "&&" Exp ;
EAdd.       Exp1  ::= Exp1  "+" Exp2 ;
ESub.       Exp1  ::= Exp1  "-" Exp2 ;
EMul.       Exp2 ::= Exp2 "*" Exp3 ;
EDiv.       Exp2 ::= Exp2 "/" Exp3 ;
EInt.       Exp3 ::= Integer ;
EDouble.    Exp3 ::= Double ;
EString.    Exp3 ::= String ;
EVarname.   Exp3 ::= QVarName ;
EFuncCall.  Exp4 ::= FunctionName "(" [Exp] ")" ;
EQFuncCall. Exp4 ::= QVarName "(" [Exp] ")" ;
EFuncParen. Exp5 ::= "(" Exp ")" ;
ENegation.  Exp6 ::= "!" Exp ;
ETypeCreate. Exp6 ::= "new" TypeInitialiser ;

TypeInt.    TypeInitialiser ::= TypeName "{" [TypePropertyInit] "}" ;
NTypeName.  TypeName ::=  QVarName ;
rules       TypePropertyInit ::= VarName "=" Exp ;

coercions Exp  10;


separator  FormalParameter "," ;
separator  Exp "," ;
separator  TypePropertyInit "," ;
separator  VarName "." ;

terminator Alias "" ;
terminator nonempty FunctionDeclaration "" ;
terminator ModuleImport "" ;
terminator Statement ";" ;






comment "/*" "*/" ;
comment "//";
comment "#";

token UIdent (upper (letter | digit | '_')*) ;
token PIdent (letter (letter | digit | '_')* '?')  ;

-- token URI ((letter|digit|[":/%#?&"])*) ;

{-
--  c grammar for expressions

Ecomma.      Exp   ::= Exp "," Exp3;
Eassign.     Exp3  ::= Exp25 Assignment_op Exp3;
Econdition.  Exp4  ::= Exp5 "?" Exp ":" Exp4;
Elor.        Exp5  ::= Exp5 "||" Exp6;
Eland.       Exp6  ::= Exp6 "&&" Exp6;
Ebitor.      Exp6  ::= Exp6 "|" Exp7;
Ebitexor.    Exp7  ::= Exp7 "^" Exp8;
Ebitand.     Exp8  ::= Exp8 "&" Exp9;
Eeq.         Exp9  ::= Exp9 "==" Exp20;
Eneq.        Exp9  ::= Exp9 "!=" Exp20;
Elthen.      Exp20 ::= Exp20 "<" Exp21;
Egrthen.     Exp20 ::= Exp20 ">" Exp21;
Ele.         Exp20 ::= Exp20 "<=" Exp21;
Ege.         Exp20 ::= Exp20 ">=" Exp21;
Eleft.       Exp21 ::= Exp21 "<<" Exp22;
Eright.      Exp21 ::= Exp21 ">>" Exp22;
Eplus.       Exp22 ::= Exp22 "+" Exp23;
Eminus.      Exp22 ::= Exp22 "-" Exp23;
Etimes.      Exp23 ::= Exp23 "*" Exp24;
Ediv.        Exp23 ::= Exp23 "/" Exp24;
Emod.        Exp23 ::= Exp23 "%" Exp24;
Etypeconv.   Exp24 ::= "(" Type_name ")" Exp24;
Epreinc.     Exp25 ::= "++" Exp25;
Epredec.     Exp25 ::= "--" Exp25;
Epreop.      Exp25 ::= Unary_operator Exp24;
Ebytesexpr.  Exp25 ::= "sizeof" Exp25;
Ebytestype.  Exp25 ::= "sizeof" "(" Type_name ")";
Earray.      Exp26 ::= Exp26 "[" Exp "]" ;
Efunk.       Exp26 ::= Exp26 "(" ")";
Efunkpar.    Exp26 ::= Exp26 "(" [Exp3] ")";
Eselect.     Exp26 ::= Exp26 "." Ident;
Epoint.      Exp26 ::= Exp26 "->" Ident;
Epostinc.    Exp26 ::= Exp26 "++";
Epostdec.    Exp26 ::= Exp26 "--";
Evar.        Exp27 ::= Ident;
Econst.      Exp27 ::= Constant;
Estring.     Exp27 ::= String;

Efloat.        Constant ::= Double;
Echar.         Constant ::= Char;
Eunsigned.     Constant ::= Unsigned;
Elong.         Constant ::= Long;
Eunsignlong.   Constant ::= UnsignedLong;
Ehexadec.      Constant ::= Hexadecimal;
Ehexaunsign.   Constant ::= HexUnsigned;
Ehexalong.     Constant ::= HexLong;
Ehexaunslong.  Constant ::= HexUnsLong;
Eoctal.        Constant ::= Octal;
Eoctalunsign.  Constant ::= OctalUnsigned;
Eoctallong.    Constant ::= OctalLong;
Eoctalunslong. Constant ::= OctalUnsLong;
Ecdouble.      Constant ::= CDouble;
Ecfloat.       Constant ::= CFloat;
Eclongdouble.  Constant ::= CLongDouble;
Eint.          Constant ::= Integer;

internal Elonger. Constant ::= Integer;
internal Edouble. Constant ::= Double;

Especial. Constant_expression ::= Exp4;

_. Exp   ::= Exp3 ;
_. Exp3  ::= Exp4 ;
_. Exp4  ::= Exp5 ;
_. Exp5  ::= Exp6 ;
_. Exp6  ::= Exp6 ;
_. Exp6  ::= Exp7 ;
_. Exp7  ::= Exp8 ;
_. Exp8  ::= Exp9 ;
_. Exp9  ::= Exp20 ;
_. Exp20 ::= Exp21 ;
_. Exp21 ::= Exp22 ;
_. Exp22 ::= Exp23 ;
_. Exp23 ::= Exp24 ;
_. Exp24 ::= Exp25 ;
_. Exp25 ::= Exp26 ;
_. Exp26 ::= Exp27 ;
_. Exp27 ::= "(" Exp ")" ;


Address.     Unary_operator ::= "&" ;
Indirection. Unary_operator ::= "*" ;
Plus.        Unary_operator ::= "+" ;
Negative.    Unary_operator ::= "-" ;
Complement.  Unary_operator ::= "~" ;
Logicalneg.  Unary_operator ::= "!" ;

(:[]).   [Exp3] ::= Exp3 ;
(:).     [Exp3] ::= Exp3 "," [Exp3];

Assign.       Assignment_op ::= "=" ;
AssignMul.    Assignment_op ::= "*=" ;
AssignDiv.    Assignment_op ::= "/=" ;
AssignMod.    Assignment_op ::= "%=" ;
AssignAdd.    Assignment_op ::= "+=" ;
AssignSub.    Assignment_op ::= "-=" ;
AssignLeft.   Assignment_op ::= "<<=" ;
AssignRight.  Assignment_op ::= ">>=" ;
AssignAnd.    Assignment_op ::= "&=" ;
AssignXor.    Assignment_op ::= "^=" ;
AssignOr.     Assignment_op ::= "|=" ;
-}


