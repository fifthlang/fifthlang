//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/fifth.parser/Parser/grammar/FifthParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class FifthParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ALIAS=1, AS=2, ELSE=3, IF=4, NEW=5, WITH=6, RETURN=7, USE=8, ASSIGN=9, 
		CLOSEBRACE=10, CLOSEPAREN=11, COMMA=12, DIVIDE=13, DOT=14, EQ=15, LAMBDASEP=16, 
		MINUS=17, OPENBRACE=18, OPENPAREN=19, PLUS=20, TIMES=21, PERCENT=22, POWER=23, 
		NEQ=24, GT=25, LT=26, GEQ=27, LEQ=28, AND=29, OR=30, NOT=31, SEMICOLON=32, 
		URICONSTANT=33, IDENTIFIER=34, IDSTART=35, IDPART=36, TIMEINTERVAL=37, 
		LETTER=38, DIGIT=39, POSITIVEDIGIT=40, NAT=41, STRING=42, FLOAT=43, INT=44, 
		EXP=45, WS=46, VARIABLE=47, ScientificNumber=48;
	public const int
		RULE_exp = 0, RULE_fifth = 1, RULE_alias = 2, RULE_exp_list = 3, RULE_formal_parameters = 4, 
		RULE_function_declaration = 5, RULE_function_args = 6, RULE_function_body = 7, 
		RULE_function_call = 8, RULE_function_name = 9, RULE_packagename = 10, 
		RULE_module_import = 11, RULE_parameter_declaration = 12, RULE_block = 13, 
		RULE_parameter_type = 14, RULE_parameter_name = 15, RULE_qvarname = 16, 
		RULE_statement = 17, RULE_type_initialiser = 18, RULE_type_name = 19, 
		RULE_type_property_init = 20, RULE_var_name = 21, RULE_variable = 22;
	public static readonly string[] ruleNames = {
		"exp", "fifth", "alias", "exp_list", "formal_parameters", "function_declaration", 
		"function_args", "function_body", "function_call", "function_name", "packagename", 
		"module_import", "parameter_declaration", "block", "parameter_type", "parameter_name", 
		"qvarname", "statement", "type_initialiser", "type_name", "type_property_init", 
		"var_name", "variable"
	};

	private static readonly string[] _LiteralNames = {
		null, "'alias'", "'as'", "'else'", "'if'", "'new'", "'with'", "'return'", 
		"'use'", "'='", "'}'", "')'", "','", "'/'", "'.'", "'=='", "'=>'", "'-'", 
		"'{'", "'('", "'+'", "'*'", "'%'", "'^'", "'!='", "'>'", "'<'", "'>='", 
		"'<='", "'&&'", "'||'", "'!'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ALIAS", "AS", "ELSE", "IF", "NEW", "WITH", "RETURN", "USE", "ASSIGN", 
		"CLOSEBRACE", "CLOSEPAREN", "COMMA", "DIVIDE", "DOT", "EQ", "LAMBDASEP", 
		"MINUS", "OPENBRACE", "OPENPAREN", "PLUS", "TIMES", "PERCENT", "POWER", 
		"NEQ", "GT", "LT", "GEQ", "LEQ", "AND", "OR", "NOT", "SEMICOLON", "URICONSTANT", 
		"IDENTIFIER", "IDSTART", "IDPART", "TIMEINTERVAL", "LETTER", "DIGIT", 
		"POSITIVEDIGIT", "NAT", "STRING", "FLOAT", "INT", "EXP", "WS", "VARIABLE", 
		"ScientificNumber"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FifthParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FifthParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FifthParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FifthParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(FifthParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(FifthParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(FifthParser.STRING, 0); }
		public QvarnameContext qvarname() {
			return GetRuleContext<QvarnameContext>(0);
		}
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode NOT() { return GetToken(FifthParser.NOT, 0); }
		public ITerminalNode NEW() { return GetToken(FifthParser.NEW, 0); }
		public Type_initialiserContext type_initialiser() {
			return GetRuleContext<Type_initialiserContext>(0);
		}
		public ITerminalNode AND() { return GetToken(FifthParser.AND, 0); }
		public ITerminalNode PLUS() { return GetToken(FifthParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(FifthParser.MINUS, 0); }
		public ITerminalNode TIMES() { return GetToken(FifthParser.TIMES, 0); }
		public ITerminalNode DIVIDE() { return GetToken(FifthParser.DIVIDE, 0); }
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_exp, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 47; Match(INT);
				}
				break;
			case 2:
				{
				State = 48; Match(FLOAT);
				}
				break;
			case 3:
				{
				State = 49; Match(STRING);
				}
				break;
			case 4:
				{
				State = 50; qvarname();
				}
				break;
			case 5:
				{
				State = 51; function_name();
				State = 52; Match(OPENPAREN);
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << OPENPAREN) | (1L << NOT) | (1L << IDENTIFIER) | (1L << STRING) | (1L << FLOAT) | (1L << INT))) != 0)) {
					{
					State = 53; exp(0);
					}
				}

				State = 56; Match(CLOSEPAREN);
				}
				break;
			case 6:
				{
				State = 58; qvarname();
				State = 59; Match(OPENPAREN);
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << OPENPAREN) | (1L << NOT) | (1L << IDENTIFIER) | (1L << STRING) | (1L << FLOAT) | (1L << INT))) != 0)) {
					{
					State = 60; exp(0);
					}
				}

				State = 63; Match(CLOSEPAREN);
				}
				break;
			case 7:
				{
				State = 65; Match(OPENPAREN);
				State = 66; exp(0);
				State = 67; Match(CLOSEPAREN);
				}
				break;
			case 8:
				{
				State = 69; Match(NOT);
				State = 70; exp(2);
				}
				break;
			case 9:
				{
				State = 71; Match(NEW);
				State = 72; type_initialiser();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 92;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 90;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 75;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 76; Match(AND);
						State = 77; exp(15);
						}
						break;
					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 78;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 79; Match(PLUS);
						State = 80; exp(14);
						}
						break;
					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 81;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 82; Match(MINUS);
						State = 83; exp(13);
						}
						break;
					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 84;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 85; Match(TIMES);
						State = 86; exp(12);
						}
						break;
					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 87;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 88; Match(DIVIDE);
						State = 89; exp(11);
						}
						break;
					}
					} 
				}
				State = 94;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FifthContext : ParserRuleContext {
		public Module_importContext[] module_import() {
			return GetRuleContexts<Module_importContext>();
		}
		public Module_importContext module_import(int i) {
			return GetRuleContext<Module_importContext>(i);
		}
		public AliasContext[] alias() {
			return GetRuleContexts<AliasContext>();
		}
		public AliasContext alias(int i) {
			return GetRuleContext<AliasContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		public FifthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fifth; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFifth(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFifth(this);
		}
	}

	[RuleVersion(0)]
	public FifthContext fifth() {
		FifthContext _localctx = new FifthContext(Context, State);
		EnterRule(_localctx, 2, RULE_fifth);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USE) {
				{
				{
				State = 95; module_import();
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ALIAS) {
				{
				{
				State = 101; alias();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 107; statement();
					}
					} 
				}
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 113; function_declaration();
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public ITerminalNode ALIAS() { return GetToken(FifthParser.ALIAS, 0); }
		public ITerminalNode URICONSTANT() { return GetToken(FifthParser.URICONSTANT, 0); }
		public ITerminalNode AS() { return GetToken(FifthParser.AS, 0); }
		public PackagenameContext packagename() {
			return GetRuleContext<PackagenameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 4, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(ALIAS);
			State = 120; Match(URICONSTANT);
			State = 121; Match(AS);
			State = 122; packagename();
			State = 123; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_listContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Exp_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterExp_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitExp_list(this);
		}
	}

	[RuleVersion(0)]
	public Exp_listContext exp_list() {
		Exp_listContext _localctx = new Exp_listContext(Context, State);
		EnterRule(_localctx, 6, RULE_exp_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; exp(0);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 126; Match(COMMA);
				State = 127; exp(0);
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parametersContext : ParserRuleContext {
		public Parameter_declarationContext[] parameter_declaration() {
			return GetRuleContexts<Parameter_declarationContext>();
		}
		public Parameter_declarationContext parameter_declaration(int i) {
			return GetRuleContext<Parameter_declarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Formal_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFormal_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFormal_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parametersContext formal_parameters() {
		Formal_parametersContext _localctx = new Formal_parametersContext(Context, State);
		EnterRule(_localctx, 8, RULE_formal_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; parameter_declaration();
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 134; Match(COMMA);
				State = 135; parameter_declaration();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Function_argsContext function_args() {
			return GetRuleContext<Function_argsContext>(0);
		}
		public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_function_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; function_name();
			State = 142; function_args();
			State = 143; function_body();
			State = 144; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argsContext : ParserRuleContext {
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public Formal_parametersContext formal_parameters() {
			return GetRuleContext<Formal_parametersContext>(0);
		}
		public Function_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_args(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_args(this);
		}
	}

	[RuleVersion(0)]
	public Function_argsContext function_args() {
		Function_argsContext _localctx = new Function_argsContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(OPENPAREN);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 147; formal_parameters();
				}
			}

			State = 150; Match(CLOSEPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		public ITerminalNode LAMBDASEP() { return GetToken(FifthParser.LAMBDASEP, 0); }
		public Exp_listContext exp_list() {
			return GetRuleContext<Exp_listContext>(0);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(LAMBDASEP);
			State = 153; exp_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 16, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; function_name();
			State = 156; Match(OPENPAREN);
			State = 157; exp(0);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 158; Match(COMMA);
				State = 159; exp(0);
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 165; Match(CLOSEPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 18, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackagenameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public PackagenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packagename; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterPackagename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitPackagename(this);
		}
	}

	[RuleVersion(0)]
	public PackagenameContext packagename() {
		PackagenameContext _localctx = new PackagenameContext(Context, State);
		EnterRule(_localctx, 20, RULE_packagename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_importContext : ParserRuleContext {
		public ITerminalNode USE() { return GetToken(FifthParser.USE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public Module_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_import; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterModule_import(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitModule_import(this);
		}
	}

	[RuleVersion(0)]
	public Module_importContext module_import() {
		Module_importContext _localctx = new Module_importContext(Context, State);
		EnterRule(_localctx, 22, RULE_module_import);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(USE);
			State = 172; Match(IDENTIFIER);
			State = 173; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declarationContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public Parameter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterParameter_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitParameter_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declarationContext parameter_declaration() {
		Parameter_declarationContext _localctx = new Parameter_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameter_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(IDENTIFIER);
			State = 176; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPENBRACE() { return GetToken(FifthParser.OPENBRACE, 0); }
		public ITerminalNode CLOSEBRACE() { return GetToken(FifthParser.CLOSEBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(OPENBRACE);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << NEW) | (1L << WITH) | (1L << RETURN) | (1L << OPENPAREN) | (1L << NOT) | (1L << IDENTIFIER) | (1L << STRING) | (1L << FLOAT) | (1L << INT))) != 0)) {
				{
				{
				State = 179; statement();
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 185; Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_typeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Parameter_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterParameter_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitParameter_type(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_typeContext parameter_type() {
		Parameter_typeContext _localctx = new Parameter_typeContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameter_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Parameter_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterParameter_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitParameter_name(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_nameContext parameter_name() {
		Parameter_nameContext _localctx = new Parameter_nameContext(Context, State);
		EnterRule(_localctx, 30, RULE_parameter_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QvarnameContext : ParserRuleContext {
		public Var_nameContext[] var_name() {
			return GetRuleContexts<Var_nameContext>();
		}
		public Var_nameContext var_name(int i) {
			return GetRuleContext<Var_nameContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(FifthParser.DOT, 0); }
		public QvarnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qvarname; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterQvarname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitQvarname(this);
		}
	}

	[RuleVersion(0)]
	public QvarnameContext qvarname() {
		QvarnameContext _localctx = new QvarnameContext(Context, State);
		EnterRule(_localctx, 32, RULE_qvarname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; var_name();
			{
			State = 192; Match(DOT);
			State = 193; var_name();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public QvarnameContext qvarname() {
			return GetRuleContext<QvarnameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(FifthParser.RETURN, 0); }
		public ITerminalNode IF() { return GetToken(FifthParser.IF, 0); }
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(FifthParser.ELSE, 0); }
		public ITerminalNode WITH() { return GetToken(FifthParser.WITH, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_statement);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 195; qvarname();
				State = 196; Match(ASSIGN);
				State = 197; exp(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; Match(RETURN);
				State = 200; exp(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 201; Match(IF);
				State = 202; Match(OPENPAREN);
				State = 203; exp(0);
				State = 204; Match(CLOSEPAREN);
				State = 205; block();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 207; Match(IF);
				State = 208; Match(OPENPAREN);
				State = 209; exp(0);
				State = 210; Match(CLOSEPAREN);
				State = 211; block();
				State = 212; Match(ELSE);
				State = 213; block();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 215; Match(WITH);
				State = 216; statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 217; exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_initialiserContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode OPENBRACE() { return GetToken(FifthParser.OPENBRACE, 0); }
		public ITerminalNode CLOSEBRACE() { return GetToken(FifthParser.CLOSEBRACE, 0); }
		public Type_property_initContext[] type_property_init() {
			return GetRuleContexts<Type_property_initContext>();
		}
		public Type_property_initContext type_property_init(int i) {
			return GetRuleContext<Type_property_initContext>(i);
		}
		public Type_initialiserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_initialiser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterType_initialiser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitType_initialiser(this);
		}
	}

	[RuleVersion(0)]
	public Type_initialiserContext type_initialiser() {
		Type_initialiserContext _localctx = new Type_initialiserContext(Context, State);
		EnterRule(_localctx, 36, RULE_type_initialiser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; type_name();
			State = 221; Match(OPENBRACE);
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 222; type_property_init();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 228; Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public QvarnameContext qvarname() {
			return GetRuleContext<QvarnameContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 38, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; qvarname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_property_initContext : ParserRuleContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Type_property_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_property_init; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterType_property_init(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitType_property_init(this);
		}
	}

	[RuleVersion(0)]
	public Type_property_initContext type_property_init() {
		Type_property_initContext _localctx = new Type_property_initContext(Context, State);
		EnterRule(_localctx, 40, RULE_type_property_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; var_name();
			State = 233; Match(ASSIGN);
			State = 234; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterVar_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitVar_name(this);
		}
	}

	[RuleVersion(0)]
	public Var_nameContext var_name() {
		Var_nameContext _localctx = new Var_nameContext(Context, State);
		EnterRule(_localctx, 42, RULE_var_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthParserListener typedListener = listener as IFifthParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 44, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x32', '\xF3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x39', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '@', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 'L', '\n', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		']', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '`', '\v', '\x2', '\x3', 
		'\x3', '\a', '\x3', '\x63', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x66', 
		'\v', '\x3', '\x3', '\x3', '\a', '\x3', 'i', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', 'l', '\v', '\x3', '\x3', '\x3', '\a', '\x3', 'o', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', 'r', '\v', '\x3', '\x3', '\x3', '\a', 
		'\x3', 'u', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'x', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x83', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x86', '\v', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x8B', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', '\x8E', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x97', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\a', '\n', '\xA3', '\n', '\n', '\f', '\n', '\xE', '\n', '\xA6', '\v', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 
		'\xB7', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xBA', '\v', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xDD', '\n', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xE2', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\xE5', '\v', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x2', '\x3', '\x2', '\x19', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x2', 
		'\x2', '\x2', '\xF9', '\x2', 'K', '\x3', '\x2', '\x2', '\x2', '\x4', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'y', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\n', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x8F', '\x3', '\x2', '\x2', '\x2', '\xE', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x14', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x18', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\xBF', '\x3', '\x2', '\x2', '\x2', '\"', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xDC', '\x3', '\x2', '\x2', '\x2', '&', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xE8', '\x3', '\x2', '\x2', '\x2', '*', '\xEA', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xEE', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\b', '\x2', '\x1', 
		'\x2', '\x31', 'L', '\a', '.', '\x2', '\x2', '\x32', 'L', '\a', '-', '\x2', 
		'\x2', '\x33', 'L', '\a', ',', '\x2', '\x2', '\x34', 'L', '\x5', '\"', 
		'\x12', '\x2', '\x35', '\x36', '\x5', '\x14', '\v', '\x2', '\x36', '\x38', 
		'\a', '\x15', '\x2', '\x2', '\x37', '\x39', '\x5', '\x2', '\x2', '\x2', 
		'\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', 
		'\r', '\x2', '\x2', ';', 'L', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x5', 
		'\"', '\x12', '\x2', '=', '?', '\a', '\x15', '\x2', '\x2', '>', '@', '\x5', 
		'\x2', '\x2', '\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\a', '\r', '\x2', '\x2', '\x42', 'L', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\a', '\x15', '\x2', '\x2', '\x44', '\x45', '\x5', '\x2', 
		'\x2', '\x2', '\x45', '\x46', '\a', '\r', '\x2', '\x2', '\x46', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\a', '!', '\x2', '\x2', 'H', 'L', '\x5', 
		'\x2', '\x2', '\x4', 'I', 'J', '\a', '\a', '\x2', '\x2', 'J', 'L', '\x5', 
		'&', '\x14', '\x2', 'K', '\x30', '\x3', '\x2', '\x2', '\x2', 'K', '\x32', 
		'\x3', '\x2', '\x2', '\x2', 'K', '\x33', '\x3', '\x2', '\x2', '\x2', 'K', 
		'\x34', '\x3', '\x2', '\x2', '\x2', 'K', '\x35', '\x3', '\x2', '\x2', 
		'\x2', 'K', '<', '\x3', '\x2', '\x2', '\x2', 'K', '\x43', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'G', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'L', '^', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\f', '\x10', 
		'\x2', '\x2', 'N', 'O', '\a', '\x1F', '\x2', '\x2', 'O', ']', '\x5', '\x2', 
		'\x2', '\x11', 'P', 'Q', '\f', '\xF', '\x2', '\x2', 'Q', 'R', '\a', '\x16', 
		'\x2', '\x2', 'R', ']', '\x5', '\x2', '\x2', '\x10', 'S', 'T', '\f', '\xE', 
		'\x2', '\x2', 'T', 'U', '\a', '\x13', '\x2', '\x2', 'U', ']', '\x5', '\x2', 
		'\x2', '\xF', 'V', 'W', '\f', '\r', '\x2', '\x2', 'W', 'X', '\a', '\x17', 
		'\x2', '\x2', 'X', ']', '\x5', '\x2', '\x2', '\xE', 'Y', 'Z', '\f', '\f', 
		'\x2', '\x2', 'Z', '[', '\a', '\xF', '\x2', '\x2', '[', ']', '\x5', '\x2', 
		'\x2', '\r', '\\', 'M', '\x3', '\x2', '\x2', '\x2', '\\', 'P', '\x3', 
		'\x2', '\x2', '\x2', '\\', 'S', '\x3', '\x2', '\x2', '\x2', '\\', 'V', 
		'\x3', '\x2', '\x2', '\x2', '\\', 'Y', '\x3', '\x2', '\x2', '\x2', ']', 
		'`', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', 
		'^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '\x61', '\x63', '\x5', '\x18', 
		'\r', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', 'j', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', 'g', 'i', '\x5', 
		'\x6', '\x4', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'p', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'o', '\x5', '$', '\x13', '\x2', 'n', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'r', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x5', 
		'\f', '\a', '\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'x', '\x3', 
		'\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', 
		'\x2', '\x2', '\x2', 'w', '\x5', '\x3', '\x2', '\x2', '\x2', 'x', 'v', 
		'\x3', '\x2', '\x2', '\x2', 'y', 'z', '\a', '\x3', '\x2', '\x2', 'z', 
		'{', '\a', '#', '\x2', '\x2', '{', '|', '\a', '\x4', '\x2', '\x2', '|', 
		'}', '\x5', '\x16', '\f', '\x2', '}', '~', '\a', '\"', '\x2', '\x2', '~', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x84', '\x5', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\a', '\xE', '\x2', '\x2', '\x81', '\x83', '\x5', 
		'\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x8C', '\x5', '\x1A', '\xE', '\x2', '\x88', '\x89', '\a', '\xE', '\x2', 
		'\x2', '\x89', '\x8B', '\x5', '\x1A', '\xE', '\x2', '\x8A', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\v', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x90', '\x5', '\x14', '\v', '\x2', '\x90', 
		'\x91', '\x5', '\xE', '\b', '\x2', '\x91', '\x92', '\x5', '\x10', '\t', 
		'\x2', '\x92', '\x93', '\a', '\"', '\x2', '\x2', '\x93', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x96', '\a', '\x15', '\x2', '\x2', '\x95', 
		'\x97', '\x5', '\n', '\x6', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\r', '\x2', '\x2', '\x99', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', '\x12', '\x2', 
		'\x2', '\x9B', '\x9C', '\x5', '\b', '\x5', '\x2', '\x9C', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\x5', '\x14', '\v', '\x2', '\x9E', 
		'\x9F', '\a', '\x15', '\x2', '\x2', '\x9F', '\xA4', '\x5', '\x2', '\x2', 
		'\x2', '\xA0', '\xA1', '\a', '\xE', '\x2', '\x2', '\xA1', '\xA3', '\x5', 
		'\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\a', '\r', '\x2', '\x2', '\xA8', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAA', '\a', '$', '\x2', '\x2', '\xAA', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAC', '\a', '$', '\x2', '\x2', '\xAC', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '\n', '\x2', 
		'\x2', '\xAE', '\xAF', '\a', '$', '\x2', '\x2', '\xAF', '\xB0', '\a', 
		'\"', '\x2', '\x2', '\xB0', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB2', '\a', '$', '\x2', '\x2', '\xB2', '\xB3', '\a', '$', '\x2', '\x2', 
		'\xB3', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB8', '\a', '\x14', 
		'\x2', '\x2', '\xB5', '\xB7', '\x5', '$', '\x13', '\x2', '\xB6', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\a', '\f', '\x2', '\x2', 
		'\xBC', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\a', '$', 
		'\x2', '\x2', '\xBE', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', 
		'\a', '$', '\x2', '\x2', '\xC0', '!', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xC2', '\x5', ',', '\x17', '\x2', '\xC2', '\xC3', '\a', '\x10', '\x2', 
		'\x2', '\xC3', '\xC4', '\x5', ',', '\x17', '\x2', '\xC4', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\"', '\x12', '\x2', '\xC6', 
		'\xC7', '\a', '\v', '\x2', '\x2', '\xC7', '\xC8', '\x5', '\x2', '\x2', 
		'\x2', '\xC8', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', 
		'\t', '\x2', '\x2', '\xCA', '\xDD', '\x5', '\x2', '\x2', '\x2', '\xCB', 
		'\xCC', '\a', '\x6', '\x2', '\x2', '\xCC', '\xCD', '\a', '\x15', '\x2', 
		'\x2', '\xCD', '\xCE', '\x5', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', 
		'\r', '\x2', '\x2', '\xCF', '\xD0', '\x5', '\x1C', '\xF', '\x2', '\xD0', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', '\x6', '\x2', 
		'\x2', '\xD2', '\xD3', '\a', '\x15', '\x2', '\x2', '\xD3', '\xD4', '\x5', 
		'\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', '\r', '\x2', '\x2', '\xD5', 
		'\xD6', '\x5', '\x1C', '\xF', '\x2', '\xD6', '\xD7', '\a', '\x5', '\x2', 
		'\x2', '\xD7', '\xD8', '\x5', '\x1C', '\xF', '\x2', '\xD8', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDA', '\a', '\b', '\x2', '\x2', '\xDA', 
		'\xDD', '\x5', '$', '\x13', '\x2', '\xDB', '\xDD', '\x5', '\x2', '\x2', 
		'\x2', '\xDC', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDF', '\x5', '(', '\x15', '\x2', '\xDF', 
		'\xE3', '\a', '\x14', '\x2', '\x2', '\xE0', '\xE2', '\x5', '*', '\x16', 
		'\x2', '\xE1', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', 
		'\f', '\x2', '\x2', '\xE7', '\'', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\x5', '\"', '\x12', '\x2', '\xE9', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xEB', '\x5', ',', '\x17', '\x2', '\xEB', '\xEC', '\a', 
		'\v', '\x2', '\x2', '\xEC', '\xED', '\x5', '\x2', '\x2', '\x2', '\xED', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\a', '$', '\x2', '\x2', 
		'\xEF', '-', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\a', '$', '\x2', 
		'\x2', '\xF1', '/', '\x3', '\x2', '\x2', '\x2', '\x12', '\x38', '?', 'K', 
		'\\', '^', '\x64', 'j', 'p', 'v', '\x84', '\x8C', '\x96', '\xA4', '\xB8', 
		'\xDC', '\xE3',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
