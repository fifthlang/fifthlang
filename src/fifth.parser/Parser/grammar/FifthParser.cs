//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/fifth.parser/Parser/grammar/Fifth.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class FifthParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ALIAS=1, AS=2, ELSE=3, IF=4, NEW=5, WITH=6, RETURN=7, USE=8, ASSIGN=9, 
		CLOSEBRACE=10, CLOSEPAREN=11, COLON=12, COMMA=13, DIVIDE=14, DOT=15, EQ=16, 
		HASH=17, LAMBDASEP=18, MINUS=19, OPENBRACE=20, OPENPAREN=21, PLUS=22, 
		QMARK=23, TIMES=24, PERCENT=25, POWER=26, NEQ=27, GT=28, LT=29, GEQ=30, 
		LEQ=31, AMP=32, AND=33, OR=34, NOT=35, SEMICOLON=36, IDENTIFIER=37, STRING=38, 
		INT=39, FLOAT=40, WS=41;
	public const int
		RULE_fifth = 0, RULE_alias = 1, RULE_block = 2, RULE_exp = 3, RULE_formal_parameters = 4, 
		RULE_function_declaration = 5, RULE_function_args = 6, RULE_function_body = 7, 
		RULE_function_call = 8, RULE_function_name = 9, RULE_iri = 10, RULE_iri_query = 11, 
		RULE_iri_query_param = 12, RULE_module_import = 13, RULE_module_name = 14, 
		RULE_packagename = 15, RULE_parameter_declaration = 16, RULE_parameter_type = 17, 
		RULE_parameter_name = 18, RULE_statement = 19, RULE_type_initialiser = 20, 
		RULE_type_name = 21, RULE_type_property_init = 22, RULE_var_name = 23;
	public static readonly string[] ruleNames = {
		"fifth", "alias", "block", "exp", "formal_parameters", "function_declaration", 
		"function_args", "function_body", "function_call", "function_name", "iri", 
		"iri_query", "iri_query_param", "module_import", "module_name", "packagename", 
		"parameter_declaration", "parameter_type", "parameter_name", "statement", 
		"type_initialiser", "type_name", "type_property_init", "var_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'alias'", "'as'", "'else'", "'if'", "'new'", "'with'", "'return'", 
		"'use'", "'='", "'}'", "')'", "':'", "','", "'/'", "'.'", "'=='", "'#'", 
		"'=>'", "'-'", "'{'", "'('", "'+'", "'?'", "'*'", "'%'", "'^'", "'!='", 
		"'>'", "'<'", "'>='", "'<='", "'&'", "'&&'", "'||'", "'!'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ALIAS", "AS", "ELSE", "IF", "NEW", "WITH", "RETURN", "USE", "ASSIGN", 
		"CLOSEBRACE", "CLOSEPAREN", "COLON", "COMMA", "DIVIDE", "DOT", "EQ", "HASH", 
		"LAMBDASEP", "MINUS", "OPENBRACE", "OPENPAREN", "PLUS", "QMARK", "TIMES", 
		"PERCENT", "POWER", "NEQ", "GT", "LT", "GEQ", "LEQ", "AMP", "AND", "OR", 
		"NOT", "SEMICOLON", "IDENTIFIER", "STRING", "INT", "FLOAT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Fifth.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FifthParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FifthParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FifthParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FifthContext : ParserRuleContext {
		public Module_importContext[] module_import() {
			return GetRuleContexts<Module_importContext>();
		}
		public Module_importContext module_import(int i) {
			return GetRuleContext<Module_importContext>(i);
		}
		public AliasContext[] alias() {
			return GetRuleContexts<AliasContext>();
		}
		public AliasContext alias(int i) {
			return GetRuleContext<AliasContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		public FifthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fifth; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFifth(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFifth(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFifth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FifthContext fifth() {
		FifthContext _localctx = new FifthContext(Context, State);
		EnterRule(_localctx, 0, RULE_fifth);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USE) {
				{
				{
				State = 48; module_import();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ALIAS) {
				{
				{
				State = 54; alias();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 63;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 60; statement();
					}
					} 
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 66; function_declaration();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public ITerminalNode ALIAS() { return GetToken(FifthParser.ALIAS, 0); }
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public ITerminalNode AS() { return GetToken(FifthParser.AS, 0); }
		public PackagenameContext packagename() {
			return GetRuleContext<PackagenameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 2, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(ALIAS);
			State = 73; iri();
			State = 74; Match(AS);
			State = 75; packagename();
			State = 76; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPENBRACE() { return GetToken(FifthParser.OPENBRACE, 0); }
		public ITerminalNode CLOSEBRACE() { return GetToken(FifthParser.CLOSEBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(OPENBRACE);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << NEW) | (1L << WITH) | (1L << RETURN) | (1L << OPENPAREN) | (1L << NOT) | (1L << IDENTIFIER) | (1L << STRING) | (1L << INT) | (1L << FLOAT))) != 0)) {
				{
				{
				State = 79; statement();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85; Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EFuncCallContext : ExpContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public EFuncCallContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEFuncCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ETypeCreateContext : ExpContext {
		public ITerminalNode NEW() { return GetToken(FifthParser.NEW, 0); }
		public Type_initialiserContext type_initialiser() {
			return GetRuleContext<Type_initialiserContext>(0);
		}
		public ETypeCreateContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterETypeCreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitETypeCreate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitETypeCreate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EVarnameContext : ExpContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public EVarnameContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEVarname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEVarname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEVarname(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EIntContext : ExpContext {
		public ITerminalNode INT() { return GetToken(FifthParser.INT, 0); }
		public EIntContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ELTContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode LT() { return GetToken(FifthParser.LT, 0); }
		public ELTContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterELT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitELT(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitELT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EDivContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode DIVIDE() { return GetToken(FifthParser.DIVIDE, 0); }
		public EDivContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EGEQContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode GEQ() { return GetToken(FifthParser.GEQ, 0); }
		public EGEQContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEGEQ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEGEQ(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEGEQ(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EAndContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode AND() { return GetToken(FifthParser.AND, 0); }
		public EAndContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EGTContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode GT() { return GetToken(FifthParser.GT, 0); }
		public EGTContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEGT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEGT(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEGT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ELEQContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode LEQ() { return GetToken(FifthParser.LEQ, 0); }
		public ELEQContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterELEQ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitELEQ(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitELEQ(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ENegationContext : ExpContext {
		public ITerminalNode NOT() { return GetToken(FifthParser.NOT, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ENegationContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterENegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitENegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitENegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ESubContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(FifthParser.MINUS, 0); }
		public ESubContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterESub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitESub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitESub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EDoubleContext : ExpContext {
		public ITerminalNode FLOAT() { return GetToken(FifthParser.FLOAT, 0); }
		public EDoubleContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEDouble(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEDouble(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EFuncParenContext : ExpContext {
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public EFuncParenContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEFuncParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEFuncParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEFuncParen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EAddContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(FifthParser.PLUS, 0); }
		public EAddContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EStringContext : ExpContext {
		public ITerminalNode STRING() { return GetToken(FifthParser.STRING, 0); }
		public EStringContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EMulContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode TIMES() { return GetToken(FifthParser.TIMES, 0); }
		public EMulContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEMul(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_exp, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				_localctx = new EIntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 88; Match(INT);
				}
				break;
			case 2:
				{
				_localctx = new EDoubleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 89; Match(FLOAT);
				}
				break;
			case 3:
				{
				_localctx = new EStringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 90; Match(STRING);
				}
				break;
			case 4:
				{
				_localctx = new EVarnameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 91; var_name();
				}
				break;
			case 5:
				{
				_localctx = new EFuncCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 92; function_name();
				State = 93; Match(OPENPAREN);
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << OPENPAREN) | (1L << NOT) | (1L << IDENTIFIER) | (1L << STRING) | (1L << INT) | (1L << FLOAT))) != 0)) {
					{
					State = 94; exp(0);
					State = 99;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 95; Match(COMMA);
						State = 96; exp(0);
						}
						}
						State = 101;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 104; Match(CLOSEPAREN);
				}
				break;
			case 6:
				{
				_localctx = new EFuncParenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 106; Match(OPENPAREN);
				State = 107; exp(0);
				State = 108; Match(CLOSEPAREN);
				}
				break;
			case 7:
				{
				_localctx = new ENegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 110; Match(NOT);
				State = 111; exp(2);
				}
				break;
			case 8:
				{
				_localctx = new ETypeCreateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 112; Match(NEW);
				State = 113; type_initialiser();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 145;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 143;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ELTContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 116;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 117; Match(LT);
						State = 118; exp(18);
						}
						break;
					case 2:
						{
						_localctx = new EGTContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 119;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 120; Match(GT);
						State = 121; exp(17);
						}
						break;
					case 3:
						{
						_localctx = new ELEQContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 122;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 123; Match(LEQ);
						State = 124; exp(16);
						}
						break;
					case 4:
						{
						_localctx = new EGEQContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 125;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 126; Match(GEQ);
						State = 127; exp(15);
						}
						break;
					case 5:
						{
						_localctx = new EAndContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 128;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 129; Match(AND);
						State = 130; exp(14);
						}
						break;
					case 6:
						{
						_localctx = new EAddContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 131;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 132; Match(PLUS);
						State = 133; exp(13);
						}
						break;
					case 7:
						{
						_localctx = new ESubContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 134;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 135; Match(MINUS);
						State = 136; exp(12);
						}
						break;
					case 8:
						{
						_localctx = new EMulContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 137;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 138; Match(TIMES);
						State = 139; exp(11);
						}
						break;
					case 9:
						{
						_localctx = new EDivContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 140;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 141; Match(DIVIDE);
						State = 142; exp(10);
						}
						break;
					}
					} 
				}
				State = 147;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Formal_parametersContext : ParserRuleContext {
		public Parameter_declarationContext[] parameter_declaration() {
			return GetRuleContexts<Parameter_declarationContext>();
		}
		public Parameter_declarationContext parameter_declaration(int i) {
			return GetRuleContext<Parameter_declarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Formal_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFormal_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFormal_parameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parametersContext formal_parameters() {
		Formal_parametersContext _localctx = new Formal_parametersContext(Context, State);
		EnterRule(_localctx, 8, RULE_formal_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; parameter_declaration();
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 149; Match(COMMA);
				State = 150; parameter_declaration();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Function_argsContext function_args() {
			return GetRuleContext<Function_argsContext>(0);
		}
		public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_function_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; function_name();
			State = 157; function_args();
			State = 158; function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argsContext : ParserRuleContext {
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public Formal_parametersContext formal_parameters() {
			return GetRuleContext<Formal_parametersContext>(0);
		}
		public Function_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_args(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_args(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argsContext function_args() {
		Function_argsContext _localctx = new Function_argsContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(OPENPAREN);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 161; formal_parameters();
				}
			}

			State = 164; Match(CLOSEPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 16, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; function_name();
			State = 169; Match(OPENPAREN);
			State = 170; exp(0);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 171; Match(COMMA);
				State = 172; exp(0);
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178; Match(CLOSEPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 18, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IriContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		public ITerminalNode QMARK() { return GetToken(FifthParser.QMARK, 0); }
		public Iri_queryContext iri_query() {
			return GetRuleContext<Iri_queryContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(FifthParser.HASH, 0); }
		public IriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIri(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IriContext iri() {
		IriContext _localctx = new IriContext(Context, State);
		EnterRule(_localctx, 20, RULE_iri);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(IDENTIFIER);
			State = 183; Match(COLON);
			State = 184; Match(IDENTIFIER);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QMARK) {
				{
				State = 185; Match(QMARK);
				State = 186; iri_query();
				}
			}

			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH) {
				{
				State = 189; Match(HASH);
				State = 190; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iri_queryContext : ParserRuleContext {
		public Iri_query_paramContext[] iri_query_param() {
			return GetRuleContexts<Iri_query_paramContext>();
		}
		public Iri_query_paramContext iri_query_param(int i) {
			return GetRuleContext<Iri_query_paramContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(FifthParser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(FifthParser.AMP, i);
		}
		public Iri_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIri_query(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIri_query(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri_query(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iri_queryContext iri_query() {
		Iri_queryContext _localctx = new Iri_queryContext(Context, State);
		EnterRule(_localctx, 22, RULE_iri_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; iri_query_param();
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AMP) {
				{
				{
				State = 194; Match(AMP);
				State = 195; iri_query_param();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iri_query_paramContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public Iri_query_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri_query_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIri_query_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIri_query_param(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri_query_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iri_query_paramContext iri_query_param() {
		Iri_query_paramContext _localctx = new Iri_query_paramContext(Context, State);
		EnterRule(_localctx, 24, RULE_iri_query_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(IDENTIFIER);
			State = 202; Match(ASSIGN);
			State = 203; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_importContext : ParserRuleContext {
		public ITerminalNode USE() { return GetToken(FifthParser.USE, 0); }
		public Module_nameContext[] module_name() {
			return GetRuleContexts<Module_nameContext>();
		}
		public Module_nameContext module_name(int i) {
			return GetRuleContext<Module_nameContext>(i);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Module_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_import; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterModule_import(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitModule_import(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_importContext module_import() {
		Module_importContext _localctx = new Module_importContext(Context, State);
		EnterRule(_localctx, 26, RULE_module_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(USE);
			State = 206; module_name();
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 207; Match(COMMA);
				State = 208; module_name();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 214; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 28, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackagenameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public PackagenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packagename; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterPackagename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitPackagename(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackagename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackagenameContext packagename() {
		PackagenameContext _localctx = new PackagenameContext(Context, State);
		EnterRule(_localctx, 30, RULE_packagename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declarationContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public Parameter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterParameter_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitParameter_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declarationContext parameter_declaration() {
		Parameter_declarationContext _localctx = new Parameter_declarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_parameter_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; type_name();
			State = 221; var_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_typeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Parameter_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterParameter_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitParameter_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_typeContext parameter_type() {
		Parameter_typeContext _localctx = new Parameter_typeContext(Context, State);
		EnterRule(_localctx, 34, RULE_parameter_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Parameter_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterParameter_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitParameter_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_nameContext parameter_name() {
		Parameter_nameContext _localctx = new Parameter_nameContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameter_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpStmtContext : StatementContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public ExpStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExpStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExpStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : StatementContext {
		public ITerminalNode IF() { return GetToken(FifthParser.IF, 0); }
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseStmtContext : StatementContext {
		public ITerminalNode IF() { return GetToken(FifthParser.IF, 0); }
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(FifthParser.ELSE, 0); }
		public IfElseStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIfElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIfElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDeclStmtContext : StatementContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarDeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterVarDeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitVarDeclStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithStmtContext : StatementContext {
		public ITerminalNode WITH() { return GetToken(FifthParser.WITH, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public WithStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStmtContext : StatementContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public AssignmentStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterAssignmentStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitAssignmentStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStmtContext : StatementContext {
		public ITerminalNode RETURN() { return GetToken(FifthParser.RETURN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public ReturnStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_statement);
		int _la;
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new VarDeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 227; type_name();
				State = 228; var_name();
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 229; Match(ASSIGN);
					State = 230; exp(0);
					}
				}

				State = 233; Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new AssignmentStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 235; var_name();
				State = 236; Match(ASSIGN);
				State = 237; exp(0);
				State = 238; Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 240; Match(RETURN);
				State = 241; exp(0);
				State = 242; Match(SEMICOLON);
				}
				break;
			case 4:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 244; Match(IF);
				State = 245; Match(OPENPAREN);
				State = 246; exp(0);
				State = 247; Match(CLOSEPAREN);
				State = 248; block();
				}
				break;
			case 5:
				_localctx = new IfElseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 250; Match(IF);
				State = 251; Match(OPENPAREN);
				State = 252; exp(0);
				State = 253; Match(CLOSEPAREN);
				State = 254; block();
				State = 255; Match(ELSE);
				State = 256; block();
				}
				break;
			case 6:
				_localctx = new WithStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 258; Match(WITH);
				State = 259; statement();
				State = 260; Match(SEMICOLON);
				}
				break;
			case 7:
				_localctx = new ExpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 262; exp(0);
				State = 263; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_initialiserContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode OPENBRACE() { return GetToken(FifthParser.OPENBRACE, 0); }
		public ITerminalNode CLOSEBRACE() { return GetToken(FifthParser.CLOSEBRACE, 0); }
		public Type_property_initContext[] type_property_init() {
			return GetRuleContexts<Type_property_initContext>();
		}
		public Type_property_initContext type_property_init(int i) {
			return GetRuleContext<Type_property_initContext>(i);
		}
		public Type_initialiserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_initialiser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterType_initialiser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitType_initialiser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_initialiser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_initialiserContext type_initialiser() {
		Type_initialiserContext _localctx = new Type_initialiserContext(Context, State);
		EnterRule(_localctx, 40, RULE_type_initialiser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; type_name();
			State = 268; Match(OPENBRACE);
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 269; type_property_init();
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 275; Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 42, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_property_initContext : ParserRuleContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Type_property_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_property_init; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterType_property_init(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitType_property_init(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_property_init(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_property_initContext type_property_init() {
		Type_property_initContext _localctx = new Type_property_initContext(Context, State);
		EnterRule(_localctx, 44, RULE_type_property_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; var_name();
			State = 280; Match(ASSIGN);
			State = 281; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterVar_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitVar_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_nameContext var_name() {
		Var_nameContext _localctx = new Var_nameContext(Context, State);
		EnterRule(_localctx, 46, RULE_var_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 17);
		case 1: return Precpred(Context, 16);
		case 2: return Precpred(Context, 15);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 9);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '\x120', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\a', '\x2', '\x34', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x37', '\v', '\x2', '\x3', '\x2', 
		'\a', '\x2', ':', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '=', '\v', '\x2', 
		'\x3', '\x2', '\a', '\x2', '@', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x43', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x46', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', 'I', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', 'S', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'V', 
		'\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x64', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', 'g', '\v', '\x5', '\x5', '\x5', 'i', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', 'u', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x92', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x95', '\v', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x9A', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', '\x9D', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xA5', '\n', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xB0', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\xB3', '\v', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', '\xBE', '\n', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\xC2', '\n', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\a', '\r', '\xC7', '\n', '\r', '\f', '\r', '\xE', '\r', 
		'\xCA', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xD4', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xD7', '\v', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\xEA', '\n', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x10C', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\a', '\x16', '\x111', '\n', '\x16', '\f', '\x16', '\xE', 
		'\x16', '\x114', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x2', '\x3', '\b', '\x1A', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x2', '\x2', '\x2', '\x12D', '\x2', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x4', 'J', '\x3', '\x2', '\x2', '\x2', '\x6', 'P', 
		'\x3', '\x2', '\x2', '\x2', '\b', 't', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\f', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x10', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\xAA', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\x16', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', ' ', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xDE', '\x3', '\x2', '\x2', '\x2', '$', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xE3', '\x3', '\x2', '\x2', '\x2', '(', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x10D', '\x3', '\x2', '\x2', '\x2', ',', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\x5', '\x1C', 
		'\xF', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', ':', 
		'\x5', '\x4', '\x3', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', 
		':', '=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '@', '\x5', '(', 
		'\x15', '\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x42', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x5', 
		'\f', '\a', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'I', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\x3', '\x2', 
		'\x2', 'K', 'L', '\x5', '\x16', '\f', '\x2', 'L', 'M', '\a', '\x4', '\x2', 
		'\x2', 'M', 'N', '\x5', ' ', '\x11', '\x2', 'N', 'O', '\a', '&', '\x2', 
		'\x2', 'O', '\x5', '\x3', '\x2', '\x2', '\x2', 'P', 'T', '\a', '\x16', 
		'\x2', '\x2', 'Q', 'S', '\x5', '(', '\x15', '\x2', 'R', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\f', 
		'\x2', '\x2', 'X', '\a', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\b', '\x5', 
		'\x1', '\x2', 'Z', 'u', '\a', ')', '\x2', '\x2', '[', 'u', '\a', '*', 
		'\x2', '\x2', '\\', 'u', '\a', '(', '\x2', '\x2', ']', 'u', '\x5', '\x30', 
		'\x19', '\x2', '^', '_', '\x5', '\x14', '\v', '\x2', '_', 'h', '\a', '\x17', 
		'\x2', '\x2', '`', '\x65', '\x5', '\b', '\x5', '\x2', '\x61', '\x62', 
		'\a', '\xF', '\x2', '\x2', '\x62', '\x64', '\x5', '\b', '\x5', '\x2', 
		'\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', 
		'\x65', '\x3', '\x2', '\x2', '\x2', 'h', '`', '\x3', '\x2', '\x2', '\x2', 
		'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\a', '\r', '\x2', '\x2', 'k', 'u', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\a', '\x17', '\x2', '\x2', 'm', 'n', '\x5', '\b', '\x5', '\x2', 
		'n', 'o', '\a', '\r', '\x2', '\x2', 'o', 'u', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\a', '%', '\x2', '\x2', 'q', 'u', '\x5', '\b', '\x5', '\x4', 
		'r', 's', '\a', '\a', '\x2', '\x2', 's', 'u', '\x5', '*', '\x16', '\x2', 
		't', 'Y', '\x3', '\x2', '\x2', '\x2', 't', '[', '\x3', '\x2', '\x2', '\x2', 
		't', '\\', '\x3', '\x2', '\x2', '\x2', 't', ']', '\x3', '\x2', '\x2', 
		'\x2', 't', '^', '\x3', '\x2', '\x2', '\x2', 't', 'l', '\x3', '\x2', '\x2', 
		'\x2', 't', 'p', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'u', '\x93', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\f', '\x13', 
		'\x2', '\x2', 'w', 'x', '\a', '\x1F', '\x2', '\x2', 'x', '\x92', '\x5', 
		'\b', '\x5', '\x14', 'y', 'z', '\f', '\x12', '\x2', '\x2', 'z', '{', '\a', 
		'\x1E', '\x2', '\x2', '{', '\x92', '\x5', '\b', '\x5', '\x13', '|', '}', 
		'\f', '\x11', '\x2', '\x2', '}', '~', '\a', '!', '\x2', '\x2', '~', '\x92', 
		'\x5', '\b', '\x5', '\x12', '\x7F', '\x80', '\f', '\x10', '\x2', '\x2', 
		'\x80', '\x81', '\a', ' ', '\x2', '\x2', '\x81', '\x92', '\x5', '\b', 
		'\x5', '\x11', '\x82', '\x83', '\f', '\xF', '\x2', '\x2', '\x83', '\x84', 
		'\a', '#', '\x2', '\x2', '\x84', '\x92', '\x5', '\b', '\x5', '\x10', '\x85', 
		'\x86', '\f', '\xE', '\x2', '\x2', '\x86', '\x87', '\a', '\x18', '\x2', 
		'\x2', '\x87', '\x92', '\x5', '\b', '\x5', '\xF', '\x88', '\x89', '\f', 
		'\r', '\x2', '\x2', '\x89', '\x8A', '\a', '\x15', '\x2', '\x2', '\x8A', 
		'\x92', '\x5', '\b', '\x5', '\xE', '\x8B', '\x8C', '\f', '\f', '\x2', 
		'\x2', '\x8C', '\x8D', '\a', '\x1A', '\x2', '\x2', '\x8D', '\x92', '\x5', 
		'\b', '\x5', '\r', '\x8E', '\x8F', '\f', '\v', '\x2', '\x2', '\x8F', '\x90', 
		'\a', '\x10', '\x2', '\x2', '\x90', '\x92', '\x5', '\b', '\x5', '\f', 
		'\x91', 'v', '\x3', '\x2', '\x2', '\x2', '\x91', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '|', '\x3', '\x2', '\x2', '\x2', '\x91', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x82', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x91', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x95', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\t', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x9B', '\x5', '\"', '\x12', '\x2', '\x97', 
		'\x98', '\a', '\xF', '\x2', '\x2', '\x98', '\x9A', '\x5', '\"', '\x12', 
		'\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x5', 
		'\x14', '\v', '\x2', '\x9F', '\xA0', '\x5', '\xE', '\b', '\x2', '\xA0', 
		'\xA1', '\x5', '\x10', '\t', '\x2', '\xA1', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA4', '\a', '\x17', '\x2', '\x2', '\xA3', '\xA5', '\x5', 
		'\n', '\x6', '\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\a', '\r', '\x2', '\x2', '\xA7', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA9', '\x5', '\x6', '\x4', '\x2', '\xA9', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x5', '\x14', '\v', 
		'\x2', '\xAB', '\xAC', '\a', '\x17', '\x2', '\x2', '\xAC', '\xB1', '\x5', 
		'\b', '\x5', '\x2', '\xAD', '\xAE', '\a', '\xF', '\x2', '\x2', '\xAE', 
		'\xB0', '\x5', '\b', '\x5', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB5', '\a', '\r', '\x2', '\x2', '\xB5', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\'', '\x2', '\x2', '\xB7', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\'', '\x2', 
		'\x2', '\xB9', '\xBA', '\a', '\xE', '\x2', '\x2', '\xBA', '\xBD', '\a', 
		'\'', '\x2', '\x2', '\xBB', '\xBC', '\a', '\x19', '\x2', '\x2', '\xBC', 
		'\xBE', '\x5', '\x18', '\r', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xC0', '\a', '\x13', '\x2', '\x2', '\xC0', 
		'\xC2', '\a', '\'', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC8', '\x5', '\x1A', '\xE', '\x2', '\xC4', 
		'\xC5', '\a', '\"', '\x2', '\x2', '\xC5', '\xC7', '\x5', '\x1A', '\xE', 
		'\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', 
		'\'', '\x2', '\x2', '\xCC', '\xCD', '\a', '\v', '\x2', '\x2', '\xCD', 
		'\xCE', '\a', '\'', '\x2', '\x2', '\xCE', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD0', '\a', '\n', '\x2', '\x2', '\xD0', '\xD5', '\x5', 
		'\x1E', '\x10', '\x2', '\xD1', '\xD2', '\a', '\xF', '\x2', '\x2', '\xD2', 
		'\xD4', '\x5', '\x1E', '\x10', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD9', '\a', '&', '\x2', '\x2', '\xD9', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', '\'', '\x2', '\x2', '\xDB', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\a', '\'', '\x2', 
		'\x2', '\xDD', '!', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\x5', 
		',', '\x17', '\x2', '\xDF', '\xE0', '\x5', '\x30', '\x19', '\x2', '\xE0', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', '\'', '\x2', '\x2', 
		'\xE2', '%', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\a', '\'', '\x2', 
		'\x2', '\xE4', '\'', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x5', 
		',', '\x17', '\x2', '\xE6', '\xE9', '\x5', '\x30', '\x19', '\x2', '\xE7', 
		'\xE8', '\a', '\v', '\x2', '\x2', '\xE8', '\xEA', '\x5', '\b', '\x5', 
		'\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\a', '&', '\x2', '\x2', '\xEC', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEE', '\x5', '\x30', '\x19', '\x2', '\xEE', '\xEF', '\a', 
		'\v', '\x2', '\x2', '\xEF', '\xF0', '\x5', '\b', '\x5', '\x2', '\xF0', 
		'\xF1', '\a', '&', '\x2', '\x2', '\xF1', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\a', '\t', '\x2', '\x2', '\xF3', '\xF4', '\x5', 
		'\b', '\x5', '\x2', '\xF4', '\xF5', '\a', '&', '\x2', '\x2', '\xF5', '\x10C', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x6', '\x2', '\x2', 
		'\xF7', '\xF8', '\a', '\x17', '\x2', '\x2', '\xF8', '\xF9', '\x5', '\b', 
		'\x5', '\x2', '\xF9', '\xFA', '\a', '\r', '\x2', '\x2', '\xFA', '\xFB', 
		'\x5', '\x6', '\x4', '\x2', '\xFB', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xFD', '\a', '\x6', '\x2', '\x2', '\xFD', '\xFE', '\a', '\x17', 
		'\x2', '\x2', '\xFE', '\xFF', '\x5', '\b', '\x5', '\x2', '\xFF', '\x100', 
		'\a', '\r', '\x2', '\x2', '\x100', '\x101', '\x5', '\x6', '\x4', '\x2', 
		'\x101', '\x102', '\a', '\x5', '\x2', '\x2', '\x102', '\x103', '\x5', 
		'\x6', '\x4', '\x2', '\x103', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x105', '\a', '\b', '\x2', '\x2', '\x105', '\x106', '\x5', '(', '\x15', 
		'\x2', '\x106', '\x107', '\a', '&', '\x2', '\x2', '\x107', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x109', '\x5', '\b', '\x5', '\x2', '\x109', 
		'\x10A', '\a', '&', '\x2', '\x2', '\x10A', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\x10B', '\xE5', '\x3', '\x2', '\x2', '\x2', '\x10B', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\xF2', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\x10B', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\x10B', '\x104', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10E', '\x5', ',', '\x17', '\x2', '\x10E', '\x112', '\a', '\x16', 
		'\x2', '\x2', '\x10F', '\x111', '\x5', '.', '\x18', '\x2', '\x110', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x110', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x115', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x112', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\a', '\f', '\x2', 
		'\x2', '\x116', '+', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\a', 
		'\'', '\x2', '\x2', '\x118', '-', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x11A', '\x5', '\x30', '\x19', '\x2', '\x11A', '\x11B', '\a', '\v', '\x2', 
		'\x2', '\x11B', '\x11C', '\x5', '\b', '\x5', '\x2', '\x11C', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', '\'', '\x2', '\x2', '\x11E', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x16', '\x35', ';', '\x41', 'G', 
		'T', '\x65', 'h', 't', '\x91', '\x93', '\x9B', '\xA4', '\xB1', '\xBD', 
		'\xC1', '\xC8', '\xD5', '\xE9', '\x10B', '\x112',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
