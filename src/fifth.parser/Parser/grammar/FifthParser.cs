//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/fifth.parser/Parser/grammar/Fifth.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class FifthParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ALIAS=1, AS=2, ELSE=3, IF=4, NEW=5, WITH=6, RETURN=7, USE=8, ASSIGN=9, 
		CLOSEBRACE=10, CLOSEPAREN=11, COLON=12, COMMA=13, DIVIDE=14, DOT=15, EQ=16, 
		HASH=17, LAMBDASEP=18, MINUS=19, OPENBRACE=20, OPENPAREN=21, PLUS=22, 
		QMARK=23, TIMES=24, PERCENT=25, POWER=26, NEQ=27, GT=28, LT=29, GEQ=30, 
		LEQ=31, AMP=32, AND=33, OR=34, NOT=35, SEMICOLON=36, IDENTIFIER=37, STRING=38, 
		INT=39, FLOAT=40, WS=41;
	public const int
		RULE_fifth = 0, RULE_alias = 1, RULE_block = 2, RULE_explist = 3, RULE_exp = 4, 
		RULE_formal_parameters = 5, RULE_function_declaration = 6, RULE_function_args = 7, 
		RULE_function_body = 8, RULE_function_call = 9, RULE_function_name = 10, 
		RULE_iri = 11, RULE_iri_query = 12, RULE_iri_query_param = 13, RULE_module_import = 14, 
		RULE_module_name = 15, RULE_packagename = 16, RULE_parameter_declaration = 17, 
		RULE_parameter_type = 18, RULE_parameter_name = 19, RULE_statement = 20, 
		RULE_type_initialiser = 21, RULE_type_name = 22, RULE_type_property_init = 23, 
		RULE_var_name = 24;
	public static readonly string[] ruleNames = {
		"fifth", "alias", "block", "explist", "exp", "formal_parameters", "function_declaration", 
		"function_args", "function_body", "function_call", "function_name", "iri", 
		"iri_query", "iri_query_param", "module_import", "module_name", "packagename", 
		"parameter_declaration", "parameter_type", "parameter_name", "statement", 
		"type_initialiser", "type_name", "type_property_init", "var_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'alias'", "'as'", "'else'", "'if'", "'new'", "'with'", "'return'", 
		"'use'", "'='", "'}'", "')'", "':'", "','", "'/'", "'.'", "'=='", "'#'", 
		"'=>'", "'-'", "'{'", "'('", "'+'", "'?'", "'*'", "'%'", "'^'", "'!='", 
		"'>'", "'<'", "'>='", "'<='", "'&'", "'&&'", "'||'", "'!'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ALIAS", "AS", "ELSE", "IF", "NEW", "WITH", "RETURN", "USE", "ASSIGN", 
		"CLOSEBRACE", "CLOSEPAREN", "COLON", "COMMA", "DIVIDE", "DOT", "EQ", "HASH", 
		"LAMBDASEP", "MINUS", "OPENBRACE", "OPENPAREN", "PLUS", "QMARK", "TIMES", 
		"PERCENT", "POWER", "NEQ", "GT", "LT", "GEQ", "LEQ", "AMP", "AND", "OR", 
		"NOT", "SEMICOLON", "IDENTIFIER", "STRING", "INT", "FLOAT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Fifth.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FifthParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FifthParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FifthParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FifthContext : ParserRuleContext {
		public Module_importContext[] module_import() {
			return GetRuleContexts<Module_importContext>();
		}
		public Module_importContext module_import(int i) {
			return GetRuleContext<Module_importContext>(i);
		}
		public AliasContext[] alias() {
			return GetRuleContexts<AliasContext>();
		}
		public AliasContext alias(int i) {
			return GetRuleContext<AliasContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		public FifthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fifth; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFifth(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFifth(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFifth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FifthContext fifth() {
		FifthContext _localctx = new FifthContext(Context, State);
		EnterRule(_localctx, 0, RULE_fifth);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USE) {
				{
				{
				State = 50; module_import();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ALIAS) {
				{
				{
				State = 56; alias();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 65;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 62; statement();
					}
					} 
				}
				State = 67;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 68; function_declaration();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public ITerminalNode ALIAS() { return GetToken(FifthParser.ALIAS, 0); }
		public IriContext iri() {
			return GetRuleContext<IriContext>(0);
		}
		public ITerminalNode AS() { return GetToken(FifthParser.AS, 0); }
		public PackagenameContext packagename() {
			return GetRuleContext<PackagenameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 2, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(ALIAS);
			State = 75; iri();
			State = 76; Match(AS);
			State = 77; packagename();
			State = 78; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPENBRACE() { return GetToken(FifthParser.OPENBRACE, 0); }
		public ITerminalNode CLOSEBRACE() { return GetToken(FifthParser.CLOSEBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(OPENBRACE);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WITH) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 81; statement();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 87; Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(Context, State);
		EnterRule(_localctx, 6, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; exp(0);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 90; Match(COMMA);
				State = 91; exp(0);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EFuncCallContext : ExpContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public EFuncCallContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEFuncCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ETypeCreateContext : ExpContext {
		public ITerminalNode NEW() { return GetToken(FifthParser.NEW, 0); }
		public Type_initialiserContext type_initialiser() {
			return GetRuleContext<Type_initialiserContext>(0);
		}
		public ETypeCreateContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterETypeCreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitETypeCreate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitETypeCreate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EVarnameContext : ExpContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public EVarnameContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEVarname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEVarname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEVarname(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EIntContext : ExpContext {
		public IToken value;
		public ITerminalNode INT() { return GetToken(FifthParser.INT, 0); }
		public EIntContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ELTContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode LT() { return GetToken(FifthParser.LT, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ELTContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterELT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitELT(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitELT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EDivContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode DIVIDE() { return GetToken(FifthParser.DIVIDE, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public EDivContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EGEQContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode GEQ() { return GetToken(FifthParser.GEQ, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public EGEQContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEGEQ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEGEQ(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEGEQ(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EAndContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode AND() { return GetToken(FifthParser.AND, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public EAndContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EGTContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode GT() { return GetToken(FifthParser.GT, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public EGTContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEGT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEGT(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEGT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ELEQContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode LEQ() { return GetToken(FifthParser.LEQ, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ELEQContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterELEQ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitELEQ(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitELEQ(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EParenContext : ExpContext {
		public ExpContext innerexp;
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public EParenContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEParen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ENegationContext : ExpContext {
		public ExpContext operand;
		public ITerminalNode NOT() { return GetToken(FifthParser.NOT, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ENegationContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterENegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitENegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitENegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ESubContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode MINUS() { return GetToken(FifthParser.MINUS, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ESubContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterESub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitESub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitESub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EDoubleContext : ExpContext {
		public IToken value;
		public ITerminalNode FLOAT() { return GetToken(FifthParser.FLOAT, 0); }
		public EDoubleContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEDouble(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEDouble(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EAddContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode PLUS() { return GetToken(FifthParser.PLUS, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public EAddContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EStringContext : ExpContext {
		public IToken value;
		public ITerminalNode STRING() { return GetToken(FifthParser.STRING, 0); }
		public EStringContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EStatementContext : ExpContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public EStatementContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EMulContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode TIMES() { return GetToken(FifthParser.TIMES, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public EMulContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEMul(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_exp, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				_localctx = new EIntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 98; ((EIntContext)_localctx).value = Match(INT);
				}
				break;
			case 2:
				{
				_localctx = new EDoubleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 99; ((EDoubleContext)_localctx).value = Match(FLOAT);
				}
				break;
			case 3:
				{
				_localctx = new EStringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 100; ((EStringContext)_localctx).value = Match(STRING);
				}
				break;
			case 4:
				{
				_localctx = new EVarnameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 101; var_name();
				}
				break;
			case 5:
				{
				_localctx = new EFuncCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 102; function_name();
				State = 103; Match(OPENPAREN);
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << NEW) | (1L << WITH) | (1L << OPENPAREN) | (1L << NOT) | (1L << IDENTIFIER) | (1L << STRING) | (1L << INT) | (1L << FLOAT))) != 0)) {
					{
					State = 104; exp(0);
					State = 109;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 105; Match(COMMA);
						State = 106; exp(0);
						}
						}
						State = 111;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 114; Match(CLOSEPAREN);
				}
				break;
			case 6:
				{
				_localctx = new EParenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 116; Match(OPENPAREN);
				State = 117; ((EParenContext)_localctx).innerexp = exp(0);
				State = 118; Match(CLOSEPAREN);
				}
				break;
			case 7:
				{
				_localctx = new ENegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 120; Match(NOT);
				State = 121; ((ENegationContext)_localctx).operand = exp(3);
				}
				break;
			case 8:
				{
				_localctx = new ETypeCreateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 122; Match(NEW);
				State = 123; type_initialiser();
				}
				break;
			case 9:
				{
				_localctx = new EStatementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 124; statement();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 156;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 154;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new ELTContext(new ExpContext(_parentctx, _parentState));
						((ELTContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 127;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 128; Match(LT);
						State = 129; ((ELTContext)_localctx).right = exp(19);
						}
						break;
					case 2:
						{
						_localctx = new EGTContext(new ExpContext(_parentctx, _parentState));
						((EGTContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 130;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 131; Match(GT);
						State = 132; ((EGTContext)_localctx).right = exp(18);
						}
						break;
					case 3:
						{
						_localctx = new ELEQContext(new ExpContext(_parentctx, _parentState));
						((ELEQContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 133;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 134; Match(LEQ);
						State = 135; ((ELEQContext)_localctx).right = exp(17);
						}
						break;
					case 4:
						{
						_localctx = new EGEQContext(new ExpContext(_parentctx, _parentState));
						((EGEQContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 136;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 137; Match(GEQ);
						State = 138; ((EGEQContext)_localctx).right = exp(16);
						}
						break;
					case 5:
						{
						_localctx = new EAndContext(new ExpContext(_parentctx, _parentState));
						((EAndContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 139;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 140; Match(AND);
						State = 141; ((EAndContext)_localctx).right = exp(15);
						}
						break;
					case 6:
						{
						_localctx = new EAddContext(new ExpContext(_parentctx, _parentState));
						((EAddContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 142;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 143; Match(PLUS);
						State = 144; ((EAddContext)_localctx).right = exp(14);
						}
						break;
					case 7:
						{
						_localctx = new ESubContext(new ExpContext(_parentctx, _parentState));
						((ESubContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 145;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 146; Match(MINUS);
						State = 147; ((ESubContext)_localctx).right = exp(13);
						}
						break;
					case 8:
						{
						_localctx = new EMulContext(new ExpContext(_parentctx, _parentState));
						((EMulContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 148;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 149; Match(TIMES);
						State = 150; ((EMulContext)_localctx).right = exp(12);
						}
						break;
					case 9:
						{
						_localctx = new EDivContext(new ExpContext(_parentctx, _parentState));
						((EDivContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 151;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 152; Match(DIVIDE);
						State = 153; ((EDivContext)_localctx).right = exp(11);
						}
						break;
					}
					} 
				}
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Formal_parametersContext : ParserRuleContext {
		public Parameter_declarationContext[] parameter_declaration() {
			return GetRuleContexts<Parameter_declarationContext>();
		}
		public Parameter_declarationContext parameter_declaration(int i) {
			return GetRuleContext<Parameter_declarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Formal_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFormal_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFormal_parameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parametersContext formal_parameters() {
		Formal_parametersContext _localctx = new Formal_parametersContext(Context, State);
		EnterRule(_localctx, 10, RULE_formal_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; parameter_declaration();
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 160; Match(COMMA);
				State = 161; parameter_declaration();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Function_argsContext function_args() {
			return GetRuleContext<Function_argsContext>(0);
		}
		public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; function_name();
			State = 168; function_args();
			State = 169; function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argsContext : ParserRuleContext {
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public Formal_parametersContext formal_parameters() {
			return GetRuleContext<Formal_parametersContext>(0);
		}
		public Function_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_args(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_args(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argsContext function_args() {
		Function_argsContext _localctx = new Function_argsContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(OPENPAREN);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 172; formal_parameters();
				}
			}

			State = 175; Match(CLOSEPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		public ITerminalNode LAMBDASEP() { return GetToken(FifthParser.LAMBDASEP, 0); }
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 16, RULE_function_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(LAMBDASEP);
			State = 178; explist();
			State = 179; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 18, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; function_name();
			State = 182; Match(OPENPAREN);
			State = 183; exp(0);
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 184; Match(COMMA);
				State = 185; exp(0);
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 191; Match(CLOSEPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 20, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IriContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		public ITerminalNode QMARK() { return GetToken(FifthParser.QMARK, 0); }
		public Iri_queryContext iri_query() {
			return GetRuleContext<Iri_queryContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(FifthParser.HASH, 0); }
		public IriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIri(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IriContext iri() {
		IriContext _localctx = new IriContext(Context, State);
		EnterRule(_localctx, 22, RULE_iri);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(IDENTIFIER);
			State = 196; Match(COLON);
			State = 197; Match(IDENTIFIER);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QMARK) {
				{
				State = 198; Match(QMARK);
				State = 199; iri_query();
				}
			}

			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH) {
				{
				State = 202; Match(HASH);
				State = 203; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iri_queryContext : ParserRuleContext {
		public Iri_query_paramContext[] iri_query_param() {
			return GetRuleContexts<Iri_query_paramContext>();
		}
		public Iri_query_paramContext iri_query_param(int i) {
			return GetRuleContext<Iri_query_paramContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(FifthParser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(FifthParser.AMP, i);
		}
		public Iri_queryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIri_query(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIri_query(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri_query(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iri_queryContext iri_query() {
		Iri_queryContext _localctx = new Iri_queryContext(Context, State);
		EnterRule(_localctx, 24, RULE_iri_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; iri_query_param();
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AMP) {
				{
				{
				State = 207; Match(AMP);
				State = 208; iri_query_param();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iri_query_paramContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public Iri_query_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri_query_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIri_query_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIri_query_param(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri_query_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iri_query_paramContext iri_query_param() {
		Iri_query_paramContext _localctx = new Iri_query_paramContext(Context, State);
		EnterRule(_localctx, 26, RULE_iri_query_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(IDENTIFIER);
			State = 215; Match(ASSIGN);
			State = 216; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_importContext : ParserRuleContext {
		public ITerminalNode USE() { return GetToken(FifthParser.USE, 0); }
		public Module_nameContext[] module_name() {
			return GetRuleContexts<Module_nameContext>();
		}
		public Module_nameContext module_name(int i) {
			return GetRuleContext<Module_nameContext>(i);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Module_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_import; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterModule_import(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitModule_import(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_importContext module_import() {
		Module_importContext _localctx = new Module_importContext(Context, State);
		EnterRule(_localctx, 28, RULE_module_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(USE);
			State = 219; module_name();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 220; Match(COMMA);
				State = 221; module_name();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 227; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 30, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackagenameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public PackagenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packagename; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterPackagename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitPackagename(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackagename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackagenameContext packagename() {
		PackagenameContext _localctx = new PackagenameContext(Context, State);
		EnterRule(_localctx, 32, RULE_packagename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declarationContext : ParserRuleContext {
		public Parameter_typeContext parameter_type() {
			return GetRuleContext<Parameter_typeContext>(0);
		}
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Parameter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterParameter_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitParameter_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declarationContext parameter_declaration() {
		Parameter_declarationContext _localctx = new Parameter_declarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_parameter_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; parameter_type();
			State = 234; parameter_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_typeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Parameter_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterParameter_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitParameter_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_typeContext parameter_type() {
		Parameter_typeContext _localctx = new Parameter_typeContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameter_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Parameter_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterParameter_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitParameter_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_nameContext parameter_name() {
		Parameter_nameContext _localctx = new Parameter_nameContext(Context, State);
		EnterRule(_localctx, 38, RULE_parameter_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfElseStmtContext : StatementContext {
		public ExpContext condition;
		public BlockContext ifpart;
		public BlockContext elsepart;
		public ITerminalNode IF() { return GetToken(FifthParser.IF, 0); }
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ITerminalNode ELSE() { return GetToken(FifthParser.ELSE, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfElseStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIfElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIfElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDeclStmtContext : StatementContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarDeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterVarDeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitVarDeclStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithStmtContext : StatementContext {
		public ITerminalNode WITH() { return GetToken(FifthParser.WITH, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStmtContext : StatementContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public AssignmentStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterAssignmentStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitAssignmentStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_statement);
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new VarDeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 240; type_name();
				State = 241; var_name();
				State = 244;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 242; Match(ASSIGN);
					State = 243; exp(0);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new AssignmentStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 246; var_name();
				State = 247; Match(ASSIGN);
				State = 248; exp(0);
				}
				break;
			case 3:
				_localctx = new IfElseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 250; Match(IF);
				State = 251; Match(OPENPAREN);
				State = 252; ((IfElseStmtContext)_localctx).condition = exp(0);
				State = 253; Match(CLOSEPAREN);
				State = 254; ((IfElseStmtContext)_localctx).ifpart = block();
				State = 255; Match(ELSE);
				State = 256; ((IfElseStmtContext)_localctx).elsepart = block();
				}
				break;
			case 4:
				_localctx = new WithStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 258; Match(WITH);
				State = 259; statement();
				State = 260; block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_initialiserContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode OPENBRACE() { return GetToken(FifthParser.OPENBRACE, 0); }
		public ITerminalNode CLOSEBRACE() { return GetToken(FifthParser.CLOSEBRACE, 0); }
		public Type_property_initContext[] type_property_init() {
			return GetRuleContexts<Type_property_initContext>();
		}
		public Type_property_initContext type_property_init(int i) {
			return GetRuleContext<Type_property_initContext>(i);
		}
		public Type_initialiserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_initialiser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterType_initialiser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitType_initialiser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_initialiser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_initialiserContext type_initialiser() {
		Type_initialiserContext _localctx = new Type_initialiserContext(Context, State);
		EnterRule(_localctx, 42, RULE_type_initialiser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; type_name();
			State = 265; Match(OPENBRACE);
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 266; type_property_init();
				}
				}
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 272; Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 44, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_property_initContext : ParserRuleContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Type_property_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_property_init; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterType_property_init(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitType_property_init(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_property_init(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_property_initContext type_property_init() {
		Type_property_initContext _localctx = new Type_property_initContext(Context, State);
		EnterRule(_localctx, 46, RULE_type_property_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; var_name();
			State = 277; Match(ASSIGN);
			State = 278; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterVar_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitVar_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_nameContext var_name() {
		Var_nameContext _localctx = new Var_nameContext(Context, State);
		EnterRule(_localctx, 48, RULE_var_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 18);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '\x11D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\a', '\x2', '\x36', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x39', 
		'\v', '\x2', '\x3', '\x2', '\a', '\x2', '<', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '?', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x42', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x45', '\v', '\x2', '\x3', '\x2', '\a', 
		'\x2', 'H', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'K', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'U', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', 'X', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '_', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x62', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'n', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', 'q', '\v', '\x6', '\x5', '\x6', 's', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x80', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', '\x9D', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'\xA0', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'\xA5', '\n', '\a', '\f', '\a', '\xE', '\a', '\xA8', '\v', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\xB0', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xBD', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\xC0', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\xCB', '\n', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\xCF', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\a', '\xE', '\xD4', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xD7', '\v', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xE1', 
		'\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xE4', '\v', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\xF7', '\n', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x109', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\a', '\x17', '\x10E', '\n', '\x17', '\f', '\x17', '\xE', '\x17', 
		'\x111', '\v', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x2', '\x3', '\n', '\x1B', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x2', '\x2', '\x2', '\x128', '\x2', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x4', 'L', '\x3', '\x2', '\x2', '\x2', '\x6', 'R', '\x3', 
		'\x2', '\x2', '\x2', '\b', '[', '\x3', '\x2', '\x2', '\x2', '\n', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x10', '\xAD', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x14', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xD8', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xE7', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '$', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xEE', '\x3', '\x2', '\x2', '\x2', '(', '\xF0', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x108', '\x3', '\x2', '\x2', '\x2', ',', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x116', '\x3', '\x2', '\x2', '\x2', '\x32', '\x11A', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x36', '\x5', '\x1E', '\x10', '\x2', '\x35', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '=', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', 
		'\x3', '\x2', '\x2', '\x2', ':', '<', '\x5', '\x4', '\x3', '\x2', ';', 
		':', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', '\x2', '\x2', 
		'=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x43', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x42', '\x5', '*', '\x16', '\x2', '\x41', '@', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x44', 'I', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'H', '\x5', '\xE', '\b', '\x2', 'G', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', '\x3', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 
		'M', '\a', '\x3', '\x2', '\x2', 'M', 'N', '\x5', '\x18', '\r', '\x2', 
		'N', 'O', '\a', '\x4', '\x2', '\x2', 'O', 'P', '\x5', '\"', '\x12', '\x2', 
		'P', 'Q', '\a', '&', '\x2', '\x2', 'Q', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'R', 'V', '\a', '\x16', '\x2', '\x2', 'S', 'U', '\x5', '*', '\x16', '\x2', 
		'T', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 
		'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 
		'W', 'Y', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'Z', '\a', '\f', '\x2', '\x2', 'Z', '\a', '\x3', '\x2', '\x2', '\x2', 
		'[', '`', '\x5', '\n', '\x6', '\x2', '\\', ']', '\a', '\xF', '\x2', '\x2', 
		']', '_', '\x5', '\n', '\x6', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', 
		'_', '\x62', '\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', 
		'\b', '\x6', '\x1', '\x2', '\x64', '\x80', '\a', ')', '\x2', '\x2', '\x65', 
		'\x80', '\a', '*', '\x2', '\x2', '\x66', '\x80', '\a', '(', '\x2', '\x2', 
		'g', '\x80', '\x5', '\x32', '\x1A', '\x2', 'h', 'i', '\x5', '\x16', '\f', 
		'\x2', 'i', 'r', '\a', '\x17', '\x2', '\x2', 'j', 'o', '\x5', '\n', '\x6', 
		'\x2', 'k', 'l', '\a', '\xF', '\x2', '\x2', 'l', 'n', '\x5', '\n', '\x6', 
		'\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'j', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', 
		'\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '\r', '\x2', 
		'\x2', 'u', '\x80', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\x17', 
		'\x2', '\x2', 'w', 'x', '\x5', '\n', '\x6', '\x2', 'x', 'y', '\a', '\r', 
		'\x2', '\x2', 'y', '\x80', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', 
		'%', '\x2', '\x2', '{', '\x80', '\x5', '\n', '\x6', '\x5', '|', '}', '\a', 
		'\a', '\x2', '\x2', '}', '\x80', '\x5', ',', '\x17', '\x2', '~', '\x80', 
		'\x5', '*', '\x16', '\x2', '\x7F', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '\x65', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', 'g', '\x3', '\x2', '\x2', '\x2', '\x7F', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', 'v', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x7F', '|', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x82', '\f', '\x14', '\x2', '\x2', '\x82', '\x83', 
		'\a', '\x1F', '\x2', '\x2', '\x83', '\x9D', '\x5', '\n', '\x6', '\x15', 
		'\x84', '\x85', '\f', '\x13', '\x2', '\x2', '\x85', '\x86', '\a', '\x1E', 
		'\x2', '\x2', '\x86', '\x9D', '\x5', '\n', '\x6', '\x14', '\x87', '\x88', 
		'\f', '\x12', '\x2', '\x2', '\x88', '\x89', '\a', '!', '\x2', '\x2', '\x89', 
		'\x9D', '\x5', '\n', '\x6', '\x13', '\x8A', '\x8B', '\f', '\x11', '\x2', 
		'\x2', '\x8B', '\x8C', '\a', ' ', '\x2', '\x2', '\x8C', '\x9D', '\x5', 
		'\n', '\x6', '\x12', '\x8D', '\x8E', '\f', '\x10', '\x2', '\x2', '\x8E', 
		'\x8F', '\a', '#', '\x2', '\x2', '\x8F', '\x9D', '\x5', '\n', '\x6', '\x11', 
		'\x90', '\x91', '\f', '\xF', '\x2', '\x2', '\x91', '\x92', '\a', '\x18', 
		'\x2', '\x2', '\x92', '\x9D', '\x5', '\n', '\x6', '\x10', '\x93', '\x94', 
		'\f', '\xE', '\x2', '\x2', '\x94', '\x95', '\a', '\x15', '\x2', '\x2', 
		'\x95', '\x9D', '\x5', '\n', '\x6', '\xF', '\x96', '\x97', '\f', '\r', 
		'\x2', '\x2', '\x97', '\x98', '\a', '\x1A', '\x2', '\x2', '\x98', '\x9D', 
		'\x5', '\n', '\x6', '\xE', '\x99', '\x9A', '\f', '\f', '\x2', '\x2', '\x9A', 
		'\x9B', '\a', '\x10', '\x2', '\x2', '\x9B', '\x9D', '\x5', '\n', '\x6', 
		'\r', '\x9C', '\x81', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x87', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x90', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x96', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9D', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\v', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA6', '\x5', '$', '\x13', 
		'\x2', '\xA2', '\xA3', '\a', '\xF', '\x2', '\x2', '\xA3', '\xA5', '\x5', 
		'$', '\x13', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAA', '\x5', '\x16', '\f', '\x2', '\xAA', '\xAB', '\x5', '\x10', '\t', 
		'\x2', '\xAB', '\xAC', '\x5', '\x12', '\n', '\x2', '\xAC', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xAF', '\a', '\x17', '\x2', '\x2', '\xAE', 
		'\xB0', '\x5', '\f', '\a', '\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB2', '\a', '\r', '\x2', '\x2', '\xB2', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x14', '\x2', 
		'\x2', '\xB4', '\xB5', '\x5', '\b', '\x5', '\x2', '\xB5', '\xB6', '\a', 
		'&', '\x2', '\x2', '\xB6', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB8', '\x5', '\x16', '\f', '\x2', '\xB8', '\xB9', '\a', '\x17', '\x2', 
		'\x2', '\xB9', '\xBE', '\x5', '\n', '\x6', '\x2', '\xBA', '\xBB', '\a', 
		'\xF', '\x2', '\x2', '\xBB', '\xBD', '\x5', '\n', '\x6', '\x2', '\xBC', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', '\r', '\x2', 
		'\x2', '\xC2', '\x15', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', 
		'\'', '\x2', '\x2', '\xC4', '\x17', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC6', '\a', '\'', '\x2', '\x2', '\xC6', '\xC7', '\a', '\xE', '\x2', 
		'\x2', '\xC7', '\xCA', '\a', '\'', '\x2', '\x2', '\xC8', '\xC9', '\a', 
		'\x19', '\x2', '\x2', '\xC9', '\xCB', '\x5', '\x1A', '\xE', '\x2', '\xCA', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\a', 
		'\x13', '\x2', '\x2', '\xCD', '\xCF', '\a', '\'', '\x2', '\x2', '\xCE', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\x19', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD5', '\x5', 
		'\x1C', '\xF', '\x2', '\xD1', '\xD2', '\a', '\"', '\x2', '\x2', '\xD2', 
		'\xD4', '\x5', '\x1C', '\xF', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD9', '\a', '\'', '\x2', '\x2', '\xD9', '\xDA', '\a', 
		'\v', '\x2', '\x2', '\xDA', '\xDB', '\a', '\'', '\x2', '\x2', '\xDB', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\a', '\n', '\x2', 
		'\x2', '\xDD', '\xE2', '\x5', ' ', '\x11', '\x2', '\xDE', '\xDF', '\a', 
		'\xF', '\x2', '\x2', '\xDF', '\xE1', '\x5', ' ', '\x11', '\x2', '\xE0', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\a', '&', '\x2', 
		'\x2', '\xE6', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\a', 
		'\'', '\x2', '\x2', '\xE8', '!', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', 
		'\a', '\'', '\x2', '\x2', '\xEA', '#', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\x5', '&', '\x14', '\x2', '\xEC', '\xED', '\x5', '(', '\x15', 
		'\x2', '\xED', '%', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\a', 
		'\'', '\x2', '\x2', '\xEF', '\'', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xF1', '\a', '\'', '\x2', '\x2', '\xF1', ')', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xF3', '\x5', '.', '\x18', '\x2', '\xF3', '\xF6', '\x5', '\x32', 
		'\x1A', '\x2', '\xF4', '\xF5', '\a', '\v', '\x2', '\x2', '\xF5', '\xF7', 
		'\x5', '\n', '\x6', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '\x109', '\x3', '\x2', 
		'\x2', '\x2', '\xF8', '\xF9', '\x5', '\x32', '\x1A', '\x2', '\xF9', '\xFA', 
		'\a', '\v', '\x2', '\x2', '\xFA', '\xFB', '\x5', '\n', '\x6', '\x2', '\xFB', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\a', '\x6', '\x2', 
		'\x2', '\xFD', '\xFE', '\a', '\x17', '\x2', '\x2', '\xFE', '\xFF', '\x5', 
		'\n', '\x6', '\x2', '\xFF', '\x100', '\a', '\r', '\x2', '\x2', '\x100', 
		'\x101', '\x5', '\x6', '\x4', '\x2', '\x101', '\x102', '\a', '\x5', '\x2', 
		'\x2', '\x102', '\x103', '\x5', '\x6', '\x4', '\x2', '\x103', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\a', '\b', '\x2', '\x2', 
		'\x105', '\x106', '\x5', '*', '\x16', '\x2', '\x106', '\x107', '\x5', 
		'\x6', '\x4', '\x2', '\x107', '\x109', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\x108', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x108', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10B', '\x5', '.', '\x18', '\x2', '\x10B', '\x10F', '\a', '\x16', 
		'\x2', '\x2', '\x10C', '\x10E', '\x5', '\x30', '\x19', '\x2', '\x10D', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\a', 
		'\f', '\x2', '\x2', '\x113', '-', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x115', '\a', '\'', '\x2', '\x2', '\x115', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x117', '\x5', '\x32', '\x1A', '\x2', '\x117', '\x118', 
		'\a', '\v', '\x2', '\x2', '\x118', '\x119', '\x5', '\n', '\x6', '\x2', 
		'\x119', '\x31', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\a', '\'', 
		'\x2', '\x2', '\x11B', '\x33', '\x3', '\x2', '\x2', '\x2', '\x17', '\x37', 
		'=', '\x43', 'I', 'V', '`', 'o', 'r', '\x7F', '\x9C', '\x9E', '\xA6', 
		'\xAF', '\xBE', '\xCA', '\xCE', '\xD5', '\xE2', '\xF6', '\x108', '\x10F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
