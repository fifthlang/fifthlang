//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from fifth.parser/grammar/Fifth.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class FifthParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ALIAS=1, AS=2, CLASS=3, ELSE=4, FALSE=5, IF=6, LIST=7, NEW=8, RETURN=9, 
		USE=10, TRUE=11, WHILE=12, WITH=13, AMP=14, AND=15, ASSIGN=16, BAR=17, 
		CLOSEBRACE=18, CLOSEBRACK=19, CLOSEPAREN=20, COLON=21, COMMA=22, DIVIDE=23, 
		DOT=24, EQ=25, GEN=26, GEQ=27, GT=28, HASH=29, LAMBDASEP=30, LEQ=31, LT=32, 
		MINUS=33, NEQ=34, NOT=35, OPENBRACE=36, OPENBRACK=37, OPENPAREN=38, OR=39, 
		PERCENT=40, PLUS=41, POWER=42, QMARK=43, SEMICOLON=44, TIMES=45, UNDERSCORE=46, 
		IDENTIFIER=47, STRING=48, INT=49, FLOAT=50, WS=51;
	public const int
		RULE_call_site = 0, RULE_fifth = 1, RULE_function_call = 2, RULE_member_access_expression = 3, 
		RULE_module_import = 4, RULE_module_name = 5, RULE_packagename = 6, RULE_class_definition = 7, 
		RULE_property_declaration = 8, RULE_type_initialiser = 9, RULE_type_name = 10, 
		RULE_type_property_init = 11, RULE_function_declaration = 12, RULE_function_body = 13, 
		RULE_function_name = 14, RULE_function_type = 15, RULE_variable_constraint = 16, 
		RULE_paramdecl = 17, RULE_param_name = 18, RULE_param_type = 19, RULE_destructuring_decl = 20, 
		RULE_destructure_binding = 21, RULE_block = 22, RULE_statement = 23, RULE_var_decl = 24, 
		RULE_identifier_chain = 25, RULE_explist = 26, RULE_exp = 27, RULE_truth_value = 28, 
		RULE_absoluteIri = 29, RULE_alias = 30, RULE_iri = 31, RULE_iri_query_param = 32, 
		RULE_qNameIri = 33, RULE_list = 34, RULE_list_body = 35, RULE_list_comp_constraint = 36, 
		RULE_list_comp_generator = 37, RULE_list_literal = 38, RULE_list_comprehension = 39, 
		RULE_list_type_signature = 40, RULE_var_name = 41;
	public static readonly string[] ruleNames = {
		"call_site", "fifth", "function_call", "member_access_expression", "module_import", 
		"module_name", "packagename", "class_definition", "property_declaration", 
		"type_initialiser", "type_name", "type_property_init", "function_declaration", 
		"function_body", "function_name", "function_type", "variable_constraint", 
		"paramdecl", "param_name", "param_type", "destructuring_decl", "destructure_binding", 
		"block", "statement", "var_decl", "identifier_chain", "explist", "exp", 
		"truth_value", "absoluteIri", "alias", "iri", "iri_query_param", "qNameIri", 
		"list", "list_body", "list_comp_constraint", "list_comp_generator", "list_literal", 
		"list_comprehension", "list_type_signature", "var_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'alias'", "'as'", "'class'", "'else'", "'false'", "'if'", "'list'", 
		"'new'", "'return'", "'use'", "'true'", "'while'", "'with'", "'&'", "'&&'", 
		"'='", "'|'", "'}'", "']'", "')'", "':'", "','", "'/'", "'.'", "'=='", 
		"'<-'", "'>='", "'>'", "'#'", "'=>'", "'<='", "'<'", "'-'", "'!='", "'!'", 
		"'{'", "'['", "'('", "'||'", "'%'", "'+'", "'^'", "'?'", "';'", "'*'", 
		"'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ALIAS", "AS", "CLASS", "ELSE", "FALSE", "IF", "LIST", "NEW", "RETURN", 
		"USE", "TRUE", "WHILE", "WITH", "AMP", "AND", "ASSIGN", "BAR", "CLOSEBRACE", 
		"CLOSEBRACK", "CLOSEPAREN", "COLON", "COMMA", "DIVIDE", "DOT", "EQ", "GEN", 
		"GEQ", "GT", "HASH", "LAMBDASEP", "LEQ", "LT", "MINUS", "NEQ", "NOT", 
		"OPENBRACE", "OPENBRACK", "OPENPAREN", "OR", "PERCENT", "PLUS", "POWER", 
		"QMARK", "SEMICOLON", "TIMES", "UNDERSCORE", "IDENTIFIER", "STRING", "INT", 
		"FLOAT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Fifth.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FifthParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FifthParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FifthParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Call_siteContext : ParserRuleContext {
		public Call_siteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_site; } }
	 
		public Call_siteContext() { }
		public virtual void CopyFrom(Call_siteContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Exp_callsite_varnameContext : Call_siteContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public Exp_callsite_varnameContext(Call_siteContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_callsite_varname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_callsite_varname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_callsite_varname(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_callsite_func_callContext : Call_siteContext {
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Exp_callsite_func_callContext(Call_siteContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_callsite_func_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_callsite_func_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_callsite_func_call(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_callsite_parenthesisedContext : Call_siteContext {
		public ExpContext innerexp;
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Exp_callsite_parenthesisedContext(Call_siteContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_callsite_parenthesised(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_callsite_parenthesised(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_callsite_parenthesised(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_siteContext call_site() {
		Call_siteContext _localctx = new Call_siteContext(Context, State);
		EnterRule(_localctx, 0, RULE_call_site);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new Exp_callsite_varnameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 84; var_name();
				}
				break;
			case 2:
				_localctx = new Exp_callsite_func_callContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 85; function_call();
				}
				break;
			case 3:
				_localctx = new Exp_callsite_parenthesisedContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 86; Match(OPENPAREN);
				State = 87; ((Exp_callsite_parenthesisedContext)_localctx).innerexp = exp(0);
				State = 88; Match(CLOSEPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FifthContext : ParserRuleContext {
		public Function_declarationContext _function_declaration;
		public IList<Function_declarationContext> _functions = new List<Function_declarationContext>();
		public Class_definitionContext _class_definition;
		public IList<Class_definitionContext> _classes = new List<Class_definitionContext>();
		public Module_importContext[] module_import() {
			return GetRuleContexts<Module_importContext>();
		}
		public Module_importContext module_import(int i) {
			return GetRuleContext<Module_importContext>(i);
		}
		public AliasContext[] alias() {
			return GetRuleContexts<AliasContext>();
		}
		public AliasContext alias(int i) {
			return GetRuleContext<AliasContext>(i);
		}
		public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		public Class_definitionContext[] class_definition() {
			return GetRuleContexts<Class_definitionContext>();
		}
		public Class_definitionContext class_definition(int i) {
			return GetRuleContext<Class_definitionContext>(i);
		}
		public FifthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fifth; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFifth(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFifth(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFifth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FifthContext fifth() {
		FifthContext _localctx = new FifthContext(Context, State);
		EnterRule(_localctx, 2, RULE_fifth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USE) {
				{
				{
				State = 92; module_import();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ALIAS) {
				{
				{
				State = 98; alias();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CLASS || _la==IDENTIFIER) {
				{
				State = 106;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 104; _localctx._function_declaration = function_declaration();
					_localctx._functions.Add(_localctx._function_declaration);
					}
					break;
				case CLASS:
					{
					State = 105; _localctx._class_definition = class_definition();
					_localctx._classes.Add(_localctx._class_definition);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 4, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; function_name();
			State = 112; Match(OPENPAREN);
			State = 113; exp(0);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 114; Match(COMMA);
				State = 115; exp(0);
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 121; Match(CLOSEPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_access_expressionContext : ParserRuleContext {
		public Call_siteContext _call_site;
		public IList<Call_siteContext> _segments = new List<Call_siteContext>();
		public Call_siteContext[] call_site() {
			return GetRuleContexts<Call_siteContext>();
		}
		public Call_siteContext call_site(int i) {
			return GetRuleContext<Call_siteContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(FifthParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(FifthParser.DOT, i);
		}
		public Member_access_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterMember_access_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitMember_access_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_access_expressionContext member_access_expression() {
		Member_access_expressionContext _localctx = new Member_access_expressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_member_access_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; _localctx._call_site = call_site();
			_localctx._segments.Add(_localctx._call_site);
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 124; Match(DOT);
					State = 125; _localctx._call_site = call_site();
					_localctx._segments.Add(_localctx._call_site);
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_importContext : ParserRuleContext {
		public ITerminalNode USE() { return GetToken(FifthParser.USE, 0); }
		public Module_nameContext[] module_name() {
			return GetRuleContexts<Module_nameContext>();
		}
		public Module_nameContext module_name(int i) {
			return GetRuleContext<Module_nameContext>(i);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Module_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_import; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterModule_import(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitModule_import(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_importContext module_import() {
		Module_importContext _localctx = new Module_importContext(Context, State);
		EnterRule(_localctx, 8, RULE_module_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(USE);
			State = 132; module_name();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 133; Match(COMMA);
				State = 134; module_name();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 140; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 10, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackagenameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public PackagenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packagename; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterPackagename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitPackagename(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackagename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackagenameContext packagename() {
		PackagenameContext _localctx = new PackagenameContext(Context, State);
		EnterRule(_localctx, 12, RULE_packagename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_definitionContext : ParserRuleContext {
		public IToken name;
		public Function_declarationContext _function_declaration;
		public IList<Function_declarationContext> _functions = new List<Function_declarationContext>();
		public Property_declarationContext _property_declaration;
		public IList<Property_declarationContext> _properties = new List<Property_declarationContext>();
		public ITerminalNode CLASS() { return GetToken(FifthParser.CLASS, 0); }
		public ITerminalNode OPENBRACE() { return GetToken(FifthParser.OPENBRACE, 0); }
		public ITerminalNode CLOSEBRACE() { return GetToken(FifthParser.CLOSEBRACE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		public Property_declarationContext[] property_declaration() {
			return GetRuleContexts<Property_declarationContext>();
		}
		public Property_declarationContext property_declaration(int i) {
			return GetRuleContext<Property_declarationContext>(i);
		}
		public Class_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterClass_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitClass_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_definitionContext class_definition() {
		Class_definitionContext _localctx = new Class_definitionContext(Context, State);
		EnterRule(_localctx, 14, RULE_class_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(CLASS);
			State = 147; _localctx.name = Match(IDENTIFIER);
			State = 148; Match(OPENBRACE);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				State = 151;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 149; _localctx._function_declaration = function_declaration();
					_localctx._functions.Add(_localctx._function_declaration);
					}
					break;
				case 2:
					{
					State = 150; _localctx._property_declaration = property_declaration();
					_localctx._properties.Add(_localctx._property_declaration);
					}
					break;
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156; Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declarationContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public Property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterProperty_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitProperty_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_declarationContext property_declaration() {
		Property_declarationContext _localctx = new Property_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_property_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; _localctx.name = Match(IDENTIFIER);
			State = 159; Match(COLON);
			State = 160; _localctx.type = Match(IDENTIFIER);
			State = 161; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_initialiserContext : ParserRuleContext {
		public Type_nameContext typename;
		public Type_property_initContext _type_property_init;
		public IList<Type_property_initContext> _properties = new List<Type_property_initContext>();
		public ITerminalNode OPENBRACE() { return GetToken(FifthParser.OPENBRACE, 0); }
		public ITerminalNode CLOSEBRACE() { return GetToken(FifthParser.CLOSEBRACE, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Type_property_initContext[] type_property_init() {
			return GetRuleContexts<Type_property_initContext>();
		}
		public Type_property_initContext type_property_init(int i) {
			return GetRuleContext<Type_property_initContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Type_initialiserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_initialiser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterType_initialiser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitType_initialiser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_initialiser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_initialiserContext type_initialiser() {
		Type_initialiserContext _localctx = new Type_initialiserContext(Context, State);
		EnterRule(_localctx, 18, RULE_type_initialiser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; _localctx.typename = type_name();
			State = 164; Match(OPENBRACE);
			State = 165; _localctx._type_property_init = type_property_init();
			_localctx._properties.Add(_localctx._type_property_init);
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 166; Match(COMMA);
				State = 167; _localctx._type_property_init = type_property_init();
				_localctx._properties.Add(_localctx._type_property_init);
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 173; Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 20, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_property_initContext : ParserRuleContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Type_property_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_property_init; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterType_property_init(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitType_property_init(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_property_init(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_property_initContext type_property_init() {
		Type_property_initContext _localctx = new Type_property_initContext(Context, State);
		EnterRule(_localctx, 22, RULE_type_property_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; var_name();
			State = 178; Match(ASSIGN);
			State = 179; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public Function_nameContext name;
		public ParamdeclContext _paramdecl;
		public IList<ParamdeclContext> _args = new List<ParamdeclContext>();
		public Function_typeContext result_type;
		public Function_bodyContext body;
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Function_typeContext function_type() {
			return GetRuleContext<Function_typeContext>(0);
		}
		public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public ParamdeclContext[] paramdecl() {
			return GetRuleContexts<ParamdeclContext>();
		}
		public ParamdeclContext paramdecl(int i) {
			return GetRuleContext<ParamdeclContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_function_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; _localctx.name = function_name();
			State = 182; Match(OPENPAREN);
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 183; _localctx._paramdecl = paramdecl();
				_localctx._args.Add(_localctx._paramdecl);
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 184; Match(COMMA);
					State = 185; _localctx._paramdecl = paramdecl();
					_localctx._args.Add(_localctx._paramdecl);
					}
					}
					State = 190;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 193; Match(CLOSEPAREN);
			State = 194; Match(COLON);
			State = 195; _localctx.result_type = function_type();
			State = 196; _localctx.body = function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_function_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Identifier_chainContext identifier_chain() {
			return GetRuleContext<Identifier_chainContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 28, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; identifier_chain();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_typeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Function_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_typeContext function_type() {
		Function_typeContext _localctx = new Function_typeContext(Context, State);
		EnterRule(_localctx, 30, RULE_function_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_constraintContext : ParserRuleContext {
		public ExpContext constraint;
		public ITerminalNode BAR() { return GetToken(FifthParser.BAR, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Variable_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterVariable_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitVariable_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_constraintContext variable_constraint() {
		Variable_constraintContext _localctx = new Variable_constraintContext(Context, State);
		EnterRule(_localctx, 32, RULE_variable_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(BAR);
			State = 205; _localctx.constraint = exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamdeclContext : ParserRuleContext {
		public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		public Param_typeContext param_type() {
			return GetRuleContext<Param_typeContext>(0);
		}
		public Variable_constraintContext variable_constraint() {
			return GetRuleContext<Variable_constraintContext>(0);
		}
		public Destructuring_declContext destructuring_decl() {
			return GetRuleContext<Destructuring_declContext>(0);
		}
		public ParamdeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramdecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterParamdecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitParamdecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamdecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamdeclContext paramdecl() {
		ParamdeclContext _localctx = new ParamdeclContext(Context, State);
		EnterRule(_localctx, 34, RULE_paramdecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; param_name();
			State = 208; Match(COLON);
			State = 209; param_type();
			State = 212;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BAR:
				{
				State = 210; variable_constraint();
				}
				break;
			case OPENBRACE:
				{
				State = 211; destructuring_decl();
				}
				break;
			case CLOSEPAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Param_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterParam_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitParam_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_nameContext param_name() {
		Param_nameContext _localctx = new Param_nameContext(Context, State);
		EnterRule(_localctx, 36, RULE_param_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_typeContext : ParserRuleContext {
		public Identifier_chainContext identifier_chain() {
			return GetRuleContext<Identifier_chainContext>(0);
		}
		public Param_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterParam_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitParam_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_typeContext param_type() {
		Param_typeContext _localctx = new Param_typeContext(Context, State);
		EnterRule(_localctx, 38, RULE_param_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; identifier_chain();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructuring_declContext : ParserRuleContext {
		public Destructure_bindingContext _destructure_binding;
		public IList<Destructure_bindingContext> _bindings = new List<Destructure_bindingContext>();
		public ITerminalNode OPENBRACE() { return GetToken(FifthParser.OPENBRACE, 0); }
		public ITerminalNode CLOSEBRACE() { return GetToken(FifthParser.CLOSEBRACE, 0); }
		public Destructure_bindingContext[] destructure_binding() {
			return GetRuleContexts<Destructure_bindingContext>();
		}
		public Destructure_bindingContext destructure_binding(int i) {
			return GetRuleContext<Destructure_bindingContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Destructuring_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructuring_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterDestructuring_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitDestructuring_decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructuring_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructuring_declContext destructuring_decl() {
		Destructuring_declContext _localctx = new Destructuring_declContext(Context, State);
		EnterRule(_localctx, 40, RULE_destructuring_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(OPENBRACE);
			State = 219; _localctx._destructure_binding = destructure_binding();
			_localctx._bindings.Add(_localctx._destructure_binding);
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 220; Match(COMMA);
				State = 221; _localctx._destructure_binding = destructure_binding();
				_localctx._bindings.Add(_localctx._destructure_binding);
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 227; Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructure_bindingContext : ParserRuleContext {
		public IToken name;
		public IToken propname;
		public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public Variable_constraintContext variable_constraint() {
			return GetRuleContext<Variable_constraintContext>(0);
		}
		public Destructuring_declContext destructuring_decl() {
			return GetRuleContext<Destructuring_declContext>(0);
		}
		public Destructure_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructure_binding; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterDestructure_binding(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitDestructure_binding(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructure_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructure_bindingContext destructure_binding() {
		Destructure_bindingContext _localctx = new Destructure_bindingContext(Context, State);
		EnterRule(_localctx, 42, RULE_destructure_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; _localctx.name = Match(IDENTIFIER);
			State = 230; Match(COLON);
			State = 231; _localctx.propname = Match(IDENTIFIER);
			State = 234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BAR:
				{
				State = 232; variable_constraint();
				}
				break;
			case OPENBRACE:
				{
				State = 233; destructuring_decl();
				}
				break;
			case CLOSEBRACE:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPENBRACE() { return GetToken(FifthParser.OPENBRACE, 0); }
		public ITerminalNode CLOSEBRACE() { return GetToken(FifthParser.CLOSEBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(FifthParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(FifthParser.SEMICOLON, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(OPENBRACE);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FALSE) | (1L << IF) | (1L << NEW) | (1L << RETURN) | (1L << TRUE) | (1L << WHILE) | (1L << WITH) | (1L << MINUS) | (1L << NOT) | (1L << OPENBRACK) | (1L << OPENPAREN) | (1L << IDENTIFIER) | (1L << STRING) | (1L << INT) | (1L << FLOAT))) != 0)) {
				{
				{
				State = 237; statement();
				State = 238; Match(SEMICOLON);
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 245; Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Stmt_ifelseContext : StatementContext {
		public ExpContext condition;
		public BlockContext ifpart;
		public BlockContext elsepart;
		public ITerminalNode IF() { return GetToken(FifthParser.IF, 0); }
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(FifthParser.ELSE, 0); }
		public Stmt_ifelseContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterStmt_ifelse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitStmt_ifelse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_ifelse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Stmt_assignmentContext : StatementContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Stmt_assignmentContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterStmt_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitStmt_assignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Stmt_whileContext : StatementContext {
		public ExpContext condition;
		public BlockContext looppart;
		public ITerminalNode WHILE() { return GetToken(FifthParser.WHILE, 0); }
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Stmt_whileContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterStmt_while(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitStmt_while(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_while(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Stmt_vardeclContext : StatementContext {
		public Var_declContext decl;
		public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Stmt_vardeclContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterStmt_vardecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitStmt_vardecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_vardecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Stmt_returnContext : StatementContext {
		public ITerminalNode RETURN() { return GetToken(FifthParser.RETURN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Stmt_returnContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterStmt_return(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitStmt_return(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_return(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Stmt_bareexpressionContext : StatementContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Stmt_bareexpressionContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterStmt_bareexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitStmt_bareexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_bareexpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Stmt_withContext : StatementContext {
		public ITerminalNode WITH() { return GetToken(FifthParser.WITH, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Stmt_withContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterStmt_with(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitStmt_with(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt_with(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_statement);
		int _la;
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new Stmt_ifelseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 247; Match(IF);
				State = 248; Match(OPENPAREN);
				State = 249; ((Stmt_ifelseContext)_localctx).condition = exp(0);
				State = 250; Match(CLOSEPAREN);
				State = 251; ((Stmt_ifelseContext)_localctx).ifpart = block();
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 252; Match(ELSE);
					State = 253; ((Stmt_ifelseContext)_localctx).elsepart = block();
					}
				}

				}
				break;
			case 2:
				_localctx = new Stmt_whileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 256; Match(WHILE);
				State = 257; Match(OPENPAREN);
				State = 258; ((Stmt_whileContext)_localctx).condition = exp(0);
				State = 259; Match(CLOSEPAREN);
				State = 260; ((Stmt_whileContext)_localctx).looppart = block();
				}
				break;
			case 3:
				_localctx = new Stmt_withContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 262; Match(WITH);
				State = 263; exp(0);
				State = 264; block();
				}
				break;
			case 4:
				_localctx = new Stmt_vardeclContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 266; ((Stmt_vardeclContext)_localctx).decl = var_decl();
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 267; Match(ASSIGN);
					State = 268; exp(0);
					}
				}

				}
				break;
			case 5:
				_localctx = new Stmt_assignmentContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 271; var_name();
				State = 272; Match(ASSIGN);
				State = 273; exp(0);
				}
				break;
			case 6:
				_localctx = new Stmt_returnContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 275; Match(RETURN);
				State = 276; exp(0);
				}
				break;
			case 7:
				_localctx = new Stmt_bareexpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 277; exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public List_type_signatureContext list_type_signature() {
			return GetRuleContext<List_type_signatureContext>(0);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterVar_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitVar_decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 48, RULE_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; var_name();
			State = 281; Match(COLON);
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 282; type_name();
				}
				break;
			case 2:
				{
				State = 283; list_type_signature();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_chainContext : ParserRuleContext {
		public IToken _IDENTIFIER;
		public IList<IToken> _segments = new List<IToken>();
		public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(FifthParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(FifthParser.DOT, i);
		}
		public Identifier_chainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_chain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIdentifier_chain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIdentifier_chain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_chain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_chainContext identifier_chain() {
		Identifier_chainContext _localctx = new Identifier_chainContext(Context, State);
		EnterRule(_localctx, 50, RULE_identifier_chain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; _localctx._IDENTIFIER = Match(IDENTIFIER);
			_localctx._segments.Add(_localctx._IDENTIFIER);
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 287; Match(DOT);
				State = 288; _localctx._IDENTIFIER = Match(IDENTIFIER);
				_localctx._segments.Add(_localctx._IDENTIFIER);
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(Context, State);
		EnterRule(_localctx, 52, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; exp(0);
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 295; Match(COMMA);
				State = 296; exp(0);
				}
				}
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Exp_geqContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode GEQ() { return GetToken(FifthParser.GEQ, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public Exp_geqContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_geq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_geq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_geq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_ltContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode LT() { return GetToken(FifthParser.LT, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public Exp_ltContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_lt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_lt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_lt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_leqContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode LEQ() { return GetToken(FifthParser.LEQ, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public Exp_leqContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_leq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_leq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_leq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_andContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode AND() { return GetToken(FifthParser.AND, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public Exp_andContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_and(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_and(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_and(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_stringContext : ExpContext {
		public IToken value;
		public ITerminalNode STRING() { return GetToken(FifthParser.STRING, 0); }
		public Exp_stringContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_booleanContext : ExpContext {
		public Truth_valueContext value;
		public Truth_valueContext truth_value() {
			return GetRuleContext<Truth_valueContext>(0);
		}
		public Exp_booleanContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_boolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_boolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_boolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_boolContext : ExpContext {
		public Truth_valueContext value;
		public Truth_valueContext truth_value() {
			return GetRuleContext<Truth_valueContext>(0);
		}
		public Exp_boolContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_bool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_bool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_bool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_gtContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode GT() { return GetToken(FifthParser.GT, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public Exp_gtContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_gt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_gt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_gt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_memberaccessContext : ExpContext {
		public Member_access_expressionContext member_access_expression() {
			return GetRuleContext<Member_access_expressionContext>(0);
		}
		public Exp_memberaccessContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_memberaccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_memberaccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_memberaccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_doubleContext : ExpContext {
		public IToken value;
		public ITerminalNode FLOAT() { return GetToken(FifthParser.FLOAT, 0); }
		public Exp_doubleContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_double(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_double(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_double(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_typecreateinstContext : ExpContext {
		public ITerminalNode NEW() { return GetToken(FifthParser.NEW, 0); }
		public Type_initialiserContext type_initialiser() {
			return GetRuleContext<Type_initialiserContext>(0);
		}
		public Exp_typecreateinstContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_typecreateinst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_typecreateinst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_typecreateinst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_subContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode MINUS() { return GetToken(FifthParser.MINUS, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public Exp_subContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_sub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_sub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_sub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_listContext : ExpContext {
		public ListContext value;
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public Exp_listContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_list(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_addContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode PLUS() { return GetToken(FifthParser.PLUS, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public Exp_addContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_add(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_add(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_add(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_mulContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode TIMES() { return GetToken(FifthParser.TIMES, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public Exp_mulContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_mul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_mul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_mul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_parenContext : ExpContext {
		public ExpContext innerexp;
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Exp_parenContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_paren(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_paren(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_paren(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_arithnegationContext : ExpContext {
		public ExpContext operand;
		public ITerminalNode MINUS() { return GetToken(FifthParser.MINUS, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Exp_arithnegationContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_arithnegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_arithnegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_arithnegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_varnameContext : ExpContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public Exp_varnameContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_varname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_varname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_varname(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_typecastContext : ExpContext {
		public Type_nameContext type;
		public ExpContext subexp;
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Exp_typecastContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_typecast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_typecast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_typecast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_intContext : ExpContext {
		public IToken value;
		public ITerminalNode INT() { return GetToken(FifthParser.INT, 0); }
		public Exp_intContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_int(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_int(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_int(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_funccallContext : ExpContext {
		public Function_nameContext funcname;
		public ExplistContext args;
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public Exp_funccallContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_funccall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_funccall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_funccall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_logicnegationContext : ExpContext {
		public ExpContext operand;
		public ITerminalNode NOT() { return GetToken(FifthParser.NOT, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Exp_logicnegationContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_logicnegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_logicnegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_logicnegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Exp_divContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode DIVIDE() { return GetToken(FifthParser.DIVIDE, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public Exp_divContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExp_div(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExp_div(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_div(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_exp, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				_localctx = new Exp_typecastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 303; Match(OPENPAREN);
				State = 304; ((Exp_typecastContext)_localctx).type = type_name();
				State = 305; Match(CLOSEPAREN);
				State = 306; ((Exp_typecastContext)_localctx).subexp = exp(23);
				}
				break;
			case 2:
				{
				_localctx = new Exp_boolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 308; ((Exp_boolContext)_localctx).value = truth_value();
				}
				break;
			case 3:
				{
				_localctx = new Exp_intContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 309; ((Exp_intContext)_localctx).value = Match(INT);
				}
				break;
			case 4:
				{
				_localctx = new Exp_doubleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 310; ((Exp_doubleContext)_localctx).value = Match(FLOAT);
				}
				break;
			case 5:
				{
				_localctx = new Exp_stringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 311; ((Exp_stringContext)_localctx).value = Match(STRING);
				}
				break;
			case 6:
				{
				_localctx = new Exp_booleanContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 312; ((Exp_booleanContext)_localctx).value = truth_value();
				}
				break;
			case 7:
				{
				_localctx = new Exp_listContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 313; ((Exp_listContext)_localctx).value = list();
				}
				break;
			case 8:
				{
				_localctx = new Exp_logicnegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 314; Match(NOT);
				State = 315; ((Exp_logicnegationContext)_localctx).operand = exp(16);
				}
				break;
			case 9:
				{
				_localctx = new Exp_arithnegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 316; Match(MINUS);
				State = 317; ((Exp_arithnegationContext)_localctx).operand = exp(15);
				}
				break;
			case 10:
				{
				_localctx = new Exp_varnameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 318; var_name();
				}
				break;
			case 11:
				{
				_localctx = new Exp_funccallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 319; ((Exp_funccallContext)_localctx).funcname = function_name();
				State = 320; Match(OPENPAREN);
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FALSE) | (1L << NEW) | (1L << TRUE) | (1L << MINUS) | (1L << NOT) | (1L << OPENBRACK) | (1L << OPENPAREN) | (1L << IDENTIFIER) | (1L << STRING) | (1L << INT) | (1L << FLOAT))) != 0)) {
					{
					State = 321; ((Exp_funccallContext)_localctx).args = explist();
					}
				}

				State = 324; Match(CLOSEPAREN);
				}
				break;
			case 12:
				{
				_localctx = new Exp_parenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 326; Match(OPENPAREN);
				State = 327; ((Exp_parenContext)_localctx).innerexp = exp(0);
				State = 328; Match(CLOSEPAREN);
				}
				break;
			case 13:
				{
				_localctx = new Exp_typecreateinstContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 330; Match(NEW);
				State = 331; type_initialiser();
				}
				break;
			case 14:
				{
				_localctx = new Exp_memberaccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 332; member_access_expression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 364;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 362;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new Exp_ltContext(new ExpContext(_parentctx, _parentState));
						((Exp_ltContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 335;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 336; Match(LT);
						State = 337; ((Exp_ltContext)_localctx).right = exp(15);
						}
						break;
					case 2:
						{
						_localctx = new Exp_gtContext(new ExpContext(_parentctx, _parentState));
						((Exp_gtContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 338;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 339; Match(GT);
						State = 340; ((Exp_gtContext)_localctx).right = exp(14);
						}
						break;
					case 3:
						{
						_localctx = new Exp_leqContext(new ExpContext(_parentctx, _parentState));
						((Exp_leqContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 341;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 342; Match(LEQ);
						State = 343; ((Exp_leqContext)_localctx).right = exp(13);
						}
						break;
					case 4:
						{
						_localctx = new Exp_geqContext(new ExpContext(_parentctx, _parentState));
						((Exp_geqContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 344;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 345; Match(GEQ);
						State = 346; ((Exp_geqContext)_localctx).right = exp(12);
						}
						break;
					case 5:
						{
						_localctx = new Exp_andContext(new ExpContext(_parentctx, _parentState));
						((Exp_andContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 347;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 348; Match(AND);
						State = 349; ((Exp_andContext)_localctx).right = exp(11);
						}
						break;
					case 6:
						{
						_localctx = new Exp_addContext(new ExpContext(_parentctx, _parentState));
						((Exp_addContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 350;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 351; Match(PLUS);
						State = 352; ((Exp_addContext)_localctx).right = exp(10);
						}
						break;
					case 7:
						{
						_localctx = new Exp_subContext(new ExpContext(_parentctx, _parentState));
						((Exp_subContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 353;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 354; Match(MINUS);
						State = 355; ((Exp_subContext)_localctx).right = exp(9);
						}
						break;
					case 8:
						{
						_localctx = new Exp_mulContext(new ExpContext(_parentctx, _parentState));
						((Exp_mulContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 356;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 357; Match(TIMES);
						State = 358; ((Exp_mulContext)_localctx).right = exp(8);
						}
						break;
					case 9:
						{
						_localctx = new Exp_divContext(new ExpContext(_parentctx, _parentState));
						((Exp_divContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 359;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 360; Match(DIVIDE);
						State = 361; ((Exp_divContext)_localctx).right = exp(7);
						}
						break;
					}
					} 
				}
				State = 366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Truth_valueContext : ParserRuleContext {
		public IToken value;
		public ITerminalNode TRUE() { return GetToken(FifthParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(FifthParser.FALSE, 0); }
		public Truth_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truth_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterTruth_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitTruth_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruth_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Truth_valueContext truth_value() {
		Truth_valueContext _localctx = new Truth_valueContext(Context, State);
		EnterRule(_localctx, 56, RULE_truth_value);
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 367; _localctx.value = Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368; _localctx.value = Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsoluteIriContext : ParserRuleContext {
		public IToken iri_scheme;
		public IToken _IDENTIFIER;
		public IList<IToken> _iri_domain = new List<IToken>();
		public IList<IToken> _iri_segment = new List<IToken>();
		public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		public ITerminalNode[] DIVIDE() { return GetTokens(FifthParser.DIVIDE); }
		public ITerminalNode DIVIDE(int i) {
			return GetToken(FifthParser.DIVIDE, i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(FifthParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(FifthParser.DOT, i);
		}
		public ITerminalNode HASH() { return GetToken(FifthParser.HASH, 0); }
		public AbsoluteIriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_absoluteIri; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterAbsoluteIri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitAbsoluteIri(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsoluteIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbsoluteIriContext absoluteIri() {
		AbsoluteIriContext _localctx = new AbsoluteIriContext(Context, State);
		EnterRule(_localctx, 58, RULE_absoluteIri);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; _localctx.iri_scheme = Match(IDENTIFIER);
			State = 372; Match(COLON);
			State = 373; Match(DIVIDE);
			State = 374; Match(DIVIDE);
			State = 375; _localctx._IDENTIFIER = Match(IDENTIFIER);
			_localctx._iri_domain.Add(_localctx._IDENTIFIER);
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 376; Match(DOT);
				State = 377; _localctx._IDENTIFIER = Match(IDENTIFIER);
				_localctx._iri_domain.Add(_localctx._IDENTIFIER);
				}
				}
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 387;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 383; Match(DIVIDE);
					State = 384; _localctx._IDENTIFIER = Match(IDENTIFIER);
					_localctx._iri_segment.Add(_localctx._IDENTIFIER);
					}
					} 
				}
				State = 389;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DIVIDE) {
				{
				State = 390; Match(DIVIDE);
				}
			}

			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH) {
				{
				State = 393; Match(HASH);
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 394; Match(IDENTIFIER);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public PackagenameContext name;
		public AbsoluteIriContext uri;
		public ITerminalNode ALIAS() { return GetToken(FifthParser.ALIAS, 0); }
		public ITerminalNode AS() { return GetToken(FifthParser.AS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public PackagenameContext packagename() {
			return GetRuleContext<PackagenameContext>(0);
		}
		public AbsoluteIriContext absoluteIri() {
			return GetRuleContext<AbsoluteIriContext>(0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 60, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; Match(ALIAS);
			State = 400; _localctx.name = packagename();
			State = 401; Match(AS);
			State = 402; _localctx.uri = absoluteIri();
			State = 403; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IriContext : ParserRuleContext {
		public QNameIriContext qNameIri() {
			return GetRuleContext<QNameIriContext>(0);
		}
		public AbsoluteIriContext absoluteIri() {
			return GetRuleContext<AbsoluteIriContext>(0);
		}
		public IriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIri(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IriContext iri() {
		IriContext _localctx = new IriContext(Context, State);
		EnterRule(_localctx, 62, RULE_iri);
		try {
			State = 407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405; qNameIri();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; absoluteIri();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iri_query_paramContext : ParserRuleContext {
		public IToken name;
		public IToken val;
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public Iri_query_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri_query_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIri_query_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIri_query_param(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri_query_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iri_query_paramContext iri_query_param() {
		Iri_query_paramContext _localctx = new Iri_query_paramContext(Context, State);
		EnterRule(_localctx, 64, RULE_iri_query_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409; _localctx.name = Match(IDENTIFIER);
			State = 410; Match(ASSIGN);
			State = 411; _localctx.val = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QNameIriContext : ParserRuleContext {
		public IToken prefix;
		public IToken fragname;
		public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public QNameIriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qNameIri; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterQNameIri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitQNameIri(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQNameIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QNameIriContext qNameIri() {
		QNameIriContext _localctx = new QNameIriContext(Context, State);
		EnterRule(_localctx, 66, RULE_qNameIri);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 413; _localctx.prefix = Match(IDENTIFIER);
				}
			}

			State = 416; Match(COLON);
			State = 417; _localctx.fragname = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public List_bodyContext body;
		public ITerminalNode OPENBRACK() { return GetToken(FifthParser.OPENBRACK, 0); }
		public ITerminalNode CLOSEBRACK() { return GetToken(FifthParser.CLOSEBRACK, 0); }
		public List_bodyContext list_body() {
			return GetRuleContext<List_bodyContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 68, RULE_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; Match(OPENBRACK);
			State = 420; _localctx.body = list_body();
			State = 421; Match(CLOSEBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_bodyContext : ParserRuleContext {
		public List_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_body; } }
	 
		public List_bodyContext() { }
		public virtual void CopyFrom(List_bodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EListLiteralContext : List_bodyContext {
		public List_literalContext list_literal() {
			return GetRuleContext<List_literalContext>(0);
		}
		public EListLiteralContext(List_bodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEListLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEListLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EListComprehensionContext : List_bodyContext {
		public List_comprehensionContext list_comprehension() {
			return GetRuleContext<List_comprehensionContext>(0);
		}
		public EListComprehensionContext(List_bodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEListComprehension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEListComprehension(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEListComprehension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_bodyContext list_body() {
		List_bodyContext _localctx = new List_bodyContext(Context, State);
		EnterRule(_localctx, 70, RULE_list_body);
		try {
			State = 425;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				_localctx = new EListLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 423; list_literal();
				}
				break;
			case 2:
				_localctx = new EListComprehensionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 424; list_comprehension();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_comp_constraintContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public List_comp_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_comp_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterList_comp_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitList_comp_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_comp_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_comp_constraintContext list_comp_constraint() {
		List_comp_constraintContext _localctx = new List_comp_constraintContext(Context, State);
		EnterRule(_localctx, 72, RULE_list_comp_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_comp_generatorContext : ParserRuleContext {
		public Var_nameContext varname;
		public Var_nameContext value;
		public ITerminalNode GEN() { return GetToken(FifthParser.GEN, 0); }
		public Var_nameContext[] var_name() {
			return GetRuleContexts<Var_nameContext>();
		}
		public Var_nameContext var_name(int i) {
			return GetRuleContext<Var_nameContext>(i);
		}
		public List_comp_generatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_comp_generator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterList_comp_generator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitList_comp_generator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_comp_generator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_comp_generatorContext list_comp_generator() {
		List_comp_generatorContext _localctx = new List_comp_generatorContext(Context, State);
		EnterRule(_localctx, 74, RULE_list_comp_generator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429; _localctx.varname = var_name();
			State = 430; Match(GEN);
			State = 431; _localctx.value = var_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_literalContext : ParserRuleContext {
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public List_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterList_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitList_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_literalContext list_literal() {
		List_literalContext _localctx = new List_literalContext(Context, State);
		EnterRule(_localctx, 76, RULE_list_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; explist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_comprehensionContext : ParserRuleContext {
		public Var_nameContext varname;
		public List_comp_generatorContext gen;
		public List_comp_constraintContext constraints;
		public ITerminalNode BAR() { return GetToken(FifthParser.BAR, 0); }
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public List_comp_generatorContext list_comp_generator() {
			return GetRuleContext<List_comp_generatorContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(FifthParser.COMMA, 0); }
		public List_comp_constraintContext list_comp_constraint() {
			return GetRuleContext<List_comp_constraintContext>(0);
		}
		public List_comprehensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_comprehension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterList_comprehension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitList_comprehension(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_comprehension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_comprehensionContext list_comprehension() {
		List_comprehensionContext _localctx = new List_comprehensionContext(Context, State);
		EnterRule(_localctx, 78, RULE_list_comprehension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; _localctx.varname = var_name();
			State = 436; Match(BAR);
			State = 437; _localctx.gen = list_comp_generator();
			{
			State = 438; Match(COMMA);
			State = 439; _localctx.constraints = list_comp_constraint();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_type_signatureContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode OPENBRACK() { return GetToken(FifthParser.OPENBRACK, 0); }
		public ITerminalNode CLOSEBRACK() { return GetToken(FifthParser.CLOSEBRACK, 0); }
		public List_type_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_type_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterList_type_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitList_type_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_type_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_type_signatureContext list_type_signature() {
		List_type_signatureContext _localctx = new List_type_signatureContext(Context, State);
		EnterRule(_localctx, 80, RULE_list_type_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; type_name();
			State = 442; Match(OPENBRACK);
			State = 443; Match(CLOSEBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterVar_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitVar_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_nameContext var_name() {
		Var_nameContext _localctx = new Var_nameContext(Context, State);
		EnterRule(_localctx, 82, RULE_var_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 27: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x35', '\x1C2', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', ']', '\n', '\x2', '\x3', '\x3', '\a', '\x3', '`', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', '\x63', '\v', '\x3', '\x3', '\x3', '\a', 
		'\x3', '\x66', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'i', '\v', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'm', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', 'p', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'w', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', 'z', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x81', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '\x84', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', '\x8A', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '\x8D', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '\x9A', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '\x9D', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xAB', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\xAE', '\v', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\a', '\xE', '\xBD', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xC0', 
		'\v', '\xE', '\x5', '\xE', '\xC2', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xD7', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\xE1', '\n', '\x16', 
		'\f', '\x16', '\xE', '\x16', '\xE4', '\v', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\xED', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\xF3', '\n', '\x18', '\f', 
		'\x18', '\xE', '\x18', '\xF6', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x101', '\n', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x110', '\n', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x119', '\n', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x11F', 
		'\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', 
		'\x124', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x127', '\v', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x12C', '\n', 
		'\x1C', '\f', '\x1C', '\xE', '\x1C', '\x12F', '\v', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x145', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x5', '\x1D', '\x150', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\a', '\x1D', '\x16D', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x170', 
		'\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x174', '\n', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x17D', '\n', '\x1F', 
		'\f', '\x1F', '\xE', '\x1F', '\x180', '\v', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\a', '\x1F', '\x184', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', 
		'\x187', '\v', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x18A', '\n', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x18E', '\n', '\x1F', '\x5', 
		'\x1F', '\x190', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x5', '!', '\x19A', 
		'\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'#', '\x5', '#', '\x1A1', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', 
		'\x5', '%', '\x1AC', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x2', 
		'\x3', '\x38', ',', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'\x2', '\x2', '\x2', '\x1D6', '\x2', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x61', '\x3', '\x2', '\x2', '\x2', '\x6', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\b', '}', '\x3', '\x2', '\x2', '\x2', '\n', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x90', '\x3', '\x2', '\x2', '\x2', '\xE', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x94', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x14', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x18', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xC8', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xCC', '\x3', '\x2', '\x2', '\x2', '\"', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xD1', '\x3', '\x2', '\x2', '\x2', '&', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '(', '\xDA', '\x3', '\x2', '\x2', '\x2', '*', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', ',', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '.', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x30', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x120', '\x3', '\x2', '\x2', '\x2', '\x36', '\x128', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x14F', '\x3', '\x2', '\x2', '\x2', ':', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '<', '\x175', '\x3', '\x2', '\x2', '\x2', '>', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1A0', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1A5', '\x3', '\x2', '\x2', '\x2', 'H', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1AF', '\x3', '\x2', '\x2', '\x2', 'N', '\x1B3', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x1B5', '\x3', '\x2', '\x2', '\x2', 'R', '\x1BB', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'V', ']', '\x5', 'T', '+', '\x2', 'W', ']', '\x5', '\x6', '\x4', '\x2', 
		'X', 'Y', '\a', '(', '\x2', '\x2', 'Y', 'Z', '\x5', '\x38', '\x1D', '\x2', 
		'Z', '[', '\a', '\x16', '\x2', '\x2', '[', ']', '\x3', '\x2', '\x2', '\x2', 
		'\\', 'V', '\x3', '\x2', '\x2', '\x2', '\\', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\\', 'X', '\x3', '\x2', '\x2', '\x2', ']', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '^', '`', '\x5', '\n', '\x6', '\x2', '_', '^', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x66', '\x5', '>', ' ', '\x2', '\x65', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 
		'n', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 
		'j', 'm', '\x5', '\x1A', '\xE', '\x2', 'k', 'm', '\x5', '\x10', '\t', 
		'\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'p', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x5', '\x1E', 
		'\x10', '\x2', 'r', 's', '\a', '(', '\x2', '\x2', 's', 'x', '\x5', '\x38', 
		'\x1D', '\x2', 't', 'u', '\a', '\x18', '\x2', '\x2', 'u', 'w', '\x5', 
		'\x38', '\x1D', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'z', 
		'\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 
		'y', '\x3', '\x2', '\x2', '\x2', 'y', '{', '\x3', '\x2', '\x2', '\x2', 
		'z', 'x', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', '\x16', '\x2', '\x2', 
		'|', '\a', '\x3', '\x2', '\x2', '\x2', '}', '\x82', '\x5', '\x2', '\x2', 
		'\x2', '~', '\x7F', '\a', '\x1A', '\x2', '\x2', '\x7F', '\x81', '\x5', 
		'\x2', '\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x86', '\a', '\f', '\x2', '\x2', '\x86', '\x8B', '\x5', '\f', '\a', '\x2', 
		'\x87', '\x88', '\a', '\x18', '\x2', '\x2', '\x88', '\x8A', '\x5', '\f', 
		'\a', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', 
		'\a', '.', '\x2', '\x2', '\x8F', '\v', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\a', '\x31', '\x2', '\x2', '\x91', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\a', '\x31', '\x2', '\x2', '\x93', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x95', '\a', '\x5', '\x2', '\x2', '\x95', 
		'\x96', '\a', '\x31', '\x2', '\x2', '\x96', '\x9B', '\a', '&', '\x2', 
		'\x2', '\x97', '\x9A', '\x5', '\x1A', '\xE', '\x2', '\x98', '\x9A', '\x5', 
		'\x12', '\n', '\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x14', '\x2', 
		'\x2', '\x9F', '\x11', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', 
		'\x31', '\x2', '\x2', '\xA1', '\xA2', '\a', '\x17', '\x2', '\x2', '\xA2', 
		'\xA3', '\a', '\x31', '\x2', '\x2', '\xA3', '\xA4', '\a', '.', '\x2', 
		'\x2', '\xA4', '\x13', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x5', 
		'\x16', '\f', '\x2', '\xA6', '\xA7', '\a', '&', '\x2', '\x2', '\xA7', 
		'\xAC', '\x5', '\x18', '\r', '\x2', '\xA8', '\xA9', '\a', '\x18', '\x2', 
		'\x2', '\xA9', '\xAB', '\x5', '\x18', '\r', '\x2', '\xAA', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x14', '\x2', '\x2', '\xB0', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\a', '\x31', '\x2', 
		'\x2', '\xB2', '\x17', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x5', 
		'T', '+', '\x2', '\xB4', '\xB5', '\a', '\x12', '\x2', '\x2', '\xB5', '\xB6', 
		'\x5', '\x38', '\x1D', '\x2', '\xB6', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB8', '\x5', '\x1E', '\x10', '\x2', '\xB8', '\xC1', '\a', '(', 
		'\x2', '\x2', '\xB9', '\xBE', '\x5', '$', '\x13', '\x2', '\xBA', '\xBB', 
		'\a', '\x18', '\x2', '\x2', '\xBB', '\xBD', '\x5', '$', '\x13', '\x2', 
		'\xBC', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x16', '\x2', '\x2', 
		'\xC4', '\xC5', '\a', '\x17', '\x2', '\x2', '\xC5', '\xC6', '\x5', ' ', 
		'\x11', '\x2', '\xC6', '\xC7', '\x5', '\x1C', '\xF', '\x2', '\xC7', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x5', '.', '\x18', '\x2', 
		'\xC9', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x5', '\x34', 
		'\x1B', '\x2', '\xCB', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', 
		'\a', '\x31', '\x2', '\x2', '\xCD', '!', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xCF', '\a', '\x13', '\x2', '\x2', '\xCF', '\xD0', '\x5', '\x38', '\x1D', 
		'\x2', '\xD0', '#', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x5', 
		'&', '\x14', '\x2', '\xD2', '\xD3', '\a', '\x17', '\x2', '\x2', '\xD3', 
		'\xD6', '\x5', '(', '\x15', '\x2', '\xD4', '\xD7', '\x5', '\"', '\x12', 
		'\x2', '\xD5', '\xD7', '\x5', '*', '\x16', '\x2', '\xD6', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', '%', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD9', '\a', '\x31', '\x2', '\x2', '\xD9', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\x5', '\x34', '\x1B', '\x2', '\xDB', 
		')', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\a', '&', '\x2', '\x2', 
		'\xDD', '\xE2', '\x5', ',', '\x17', '\x2', '\xDE', '\xDF', '\a', '\x18', 
		'\x2', '\x2', '\xDF', '\xE1', '\x5', ',', '\x17', '\x2', '\xE0', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\xE1', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\xE3', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\a', '\x14', '\x2', '\x2', 
		'\xE6', '+', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\a', '\x31', 
		'\x2', '\x2', '\xE8', '\xE9', '\a', '\x17', '\x2', '\x2', '\xE9', '\xEC', 
		'\a', '\x31', '\x2', '\x2', '\xEA', '\xED', '\x5', '\"', '\x12', '\x2', 
		'\xEB', '\xED', '\x5', '*', '\x16', '\x2', '\xEC', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '-', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xF4', '\a', '&', '\x2', '\x2', '\xEF', '\xF0', '\x5', '\x30', '\x19', 
		'\x2', '\xF0', '\xF1', '\a', '.', '\x2', '\x2', '\xF1', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF8', '\a', '\x14', '\x2', '\x2', '\xF8', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xFA', '\a', '\b', '\x2', '\x2', '\xFA', '\xFB', '\a', 
		'(', '\x2', '\x2', '\xFB', '\xFC', '\x5', '\x38', '\x1D', '\x2', '\xFC', 
		'\xFD', '\a', '\x16', '\x2', '\x2', '\xFD', '\x100', '\x5', '.', '\x18', 
		'\x2', '\xFE', '\xFF', '\a', '\x6', '\x2', '\x2', '\xFF', '\x101', '\x5', 
		'.', '\x18', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x101', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x103', '\a', '\xE', '\x2', '\x2', '\x103', '\x104', 
		'\a', '(', '\x2', '\x2', '\x104', '\x105', '\x5', '\x38', '\x1D', '\x2', 
		'\x105', '\x106', '\a', '\x16', '\x2', '\x2', '\x106', '\x107', '\x5', 
		'.', '\x18', '\x2', '\x107', '\x119', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x109', '\a', '\xF', '\x2', '\x2', '\x109', '\x10A', '\x5', '\x38', '\x1D', 
		'\x2', '\x10A', '\x10B', '\x5', '.', '\x18', '\x2', '\x10B', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x10F', '\x5', '\x32', '\x1A', '\x2', 
		'\x10D', '\x10E', '\a', '\x12', '\x2', '\x2', '\x10E', '\x110', '\x5', 
		'\x38', '\x1D', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x110', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x112', '\x5', 'T', '+', '\x2', '\x112', '\x113', '\a', 
		'\x12', '\x2', '\x2', '\x113', '\x114', '\x5', '\x38', '\x1D', '\x2', 
		'\x114', '\x119', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\a', 
		'\v', '\x2', '\x2', '\x116', '\x119', '\x5', '\x38', '\x1D', '\x2', '\x117', 
		'\x119', '\x5', '\x38', '\x1D', '\x2', '\x118', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\x118', '\x102', '\x3', '\x2', '\x2', '\x2', '\x118', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x111', '\x3', '\x2', '\x2', '\x2', '\x118', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x117', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x5', 'T', '+', 
		'\x2', '\x11B', '\x11E', '\a', '\x17', '\x2', '\x2', '\x11C', '\x11F', 
		'\x5', '\x16', '\f', '\x2', '\x11D', '\x11F', '\x5', 'R', '*', '\x2', 
		'\x11E', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x11F', '\x33', '\x3', '\x2', '\x2', '\x2', '\x120', 
		'\x125', '\a', '\x31', '\x2', '\x2', '\x121', '\x122', '\a', '\x1A', '\x2', 
		'\x2', '\x122', '\x124', '\a', '\x31', '\x2', '\x2', '\x123', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x123', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x35', '\x3', '\x2', '\x2', '\x2', '\x127', 
		'\x125', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12D', '\x5', '\x38', 
		'\x1D', '\x2', '\x129', '\x12A', '\a', '\x18', '\x2', '\x2', '\x12A', 
		'\x12C', '\x5', '\x38', '\x1D', '\x2', '\x12B', '\x129', '\x3', '\x2', 
		'\x2', '\x2', '\x12C', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x37', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x131', '\b', '\x1D', '\x1', '\x2', '\x131', 
		'\x132', '\a', '(', '\x2', '\x2', '\x132', '\x133', '\x5', '\x16', '\f', 
		'\x2', '\x133', '\x134', '\a', '\x16', '\x2', '\x2', '\x134', '\x135', 
		'\x5', '\x38', '\x1D', '\x19', '\x135', '\x150', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x150', '\x5', ':', '\x1E', '\x2', '\x137', '\x150', 
		'\a', '\x33', '\x2', '\x2', '\x138', '\x150', '\a', '\x34', '\x2', '\x2', 
		'\x139', '\x150', '\a', '\x32', '\x2', '\x2', '\x13A', '\x150', '\x5', 
		':', '\x1E', '\x2', '\x13B', '\x150', '\x5', '\x46', '$', '\x2', '\x13C', 
		'\x13D', '\a', '%', '\x2', '\x2', '\x13D', '\x150', '\x5', '\x38', '\x1D', 
		'\x12', '\x13E', '\x13F', '\a', '#', '\x2', '\x2', '\x13F', '\x150', '\x5', 
		'\x38', '\x1D', '\x11', '\x140', '\x150', '\x5', 'T', '+', '\x2', '\x141', 
		'\x142', '\x5', '\x1E', '\x10', '\x2', '\x142', '\x144', '\a', '(', '\x2', 
		'\x2', '\x143', '\x145', '\x5', '\x36', '\x1C', '\x2', '\x144', '\x143', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x146', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\a', 
		'\x16', '\x2', '\x2', '\x147', '\x150', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x149', '\a', '(', '\x2', '\x2', '\x149', '\x14A', '\x5', '\x38', '\x1D', 
		'\x2', '\x14A', '\x14B', '\a', '\x16', '\x2', '\x2', '\x14B', '\x150', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\a', '\n', '\x2', '\x2', 
		'\x14D', '\x150', '\x5', '\x14', '\v', '\x2', '\x14E', '\x150', '\x5', 
		'\b', '\x5', '\x2', '\x14F', '\x130', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x138', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x13C', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\f', 
		'\x10', '\x2', '\x2', '\x152', '\x153', '\a', '\"', '\x2', '\x2', '\x153', 
		'\x16D', '\x5', '\x38', '\x1D', '\x11', '\x154', '\x155', '\f', '\xF', 
		'\x2', '\x2', '\x155', '\x156', '\a', '\x1E', '\x2', '\x2', '\x156', '\x16D', 
		'\x5', '\x38', '\x1D', '\x10', '\x157', '\x158', '\f', '\xE', '\x2', '\x2', 
		'\x158', '\x159', '\a', '!', '\x2', '\x2', '\x159', '\x16D', '\x5', '\x38', 
		'\x1D', '\xF', '\x15A', '\x15B', '\f', '\r', '\x2', '\x2', '\x15B', '\x15C', 
		'\a', '\x1D', '\x2', '\x2', '\x15C', '\x16D', '\x5', '\x38', '\x1D', '\xE', 
		'\x15D', '\x15E', '\f', '\f', '\x2', '\x2', '\x15E', '\x15F', '\a', '\x11', 
		'\x2', '\x2', '\x15F', '\x16D', '\x5', '\x38', '\x1D', '\r', '\x160', 
		'\x161', '\f', '\v', '\x2', '\x2', '\x161', '\x162', '\a', '+', '\x2', 
		'\x2', '\x162', '\x16D', '\x5', '\x38', '\x1D', '\f', '\x163', '\x164', 
		'\f', '\n', '\x2', '\x2', '\x164', '\x165', '\a', '#', '\x2', '\x2', '\x165', 
		'\x16D', '\x5', '\x38', '\x1D', '\v', '\x166', '\x167', '\f', '\t', '\x2', 
		'\x2', '\x167', '\x168', '\a', '/', '\x2', '\x2', '\x168', '\x16D', '\x5', 
		'\x38', '\x1D', '\n', '\x169', '\x16A', '\f', '\b', '\x2', '\x2', '\x16A', 
		'\x16B', '\a', '\x19', '\x2', '\x2', '\x16B', '\x16D', '\x5', '\x38', 
		'\x1D', '\t', '\x16C', '\x151', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'\x16C', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x160', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x166', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x169', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x16C', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x170', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x171', 
		'\x174', '\a', '\r', '\x2', '\x2', '\x172', '\x174', '\a', '\a', '\x2', 
		'\x2', '\x173', '\x171', '\x3', '\x2', '\x2', '\x2', '\x173', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x174', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x175', '\x176', '\a', '\x31', '\x2', '\x2', '\x176', '\x177', '\a', 
		'\x17', '\x2', '\x2', '\x177', '\x178', '\a', '\x19', '\x2', '\x2', '\x178', 
		'\x179', '\a', '\x19', '\x2', '\x2', '\x179', '\x17E', '\a', '\x31', '\x2', 
		'\x2', '\x17A', '\x17B', '\a', '\x1A', '\x2', '\x2', '\x17B', '\x17D', 
		'\a', '\x31', '\x2', '\x2', '\x17C', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x180', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17C', '\x3', 
		'\x2', '\x2', '\x2', '\x17E', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x17F', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x182', '\a', '\x19', '\x2', '\x2', '\x182', '\x184', 
		'\a', '\x31', '\x2', '\x2', '\x183', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x187', '\x3', '\x2', '\x2', '\x2', '\x185', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x186', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x187', '\x185', '\x3', '\x2', '\x2', 
		'\x2', '\x188', '\x18A', '\a', '\x19', '\x2', '\x2', '\x189', '\x188', 
		'\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'\x18A', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18D', '\a', 
		'\x1F', '\x2', '\x2', '\x18C', '\x18E', '\a', '\x31', '\x2', '\x2', '\x18D', 
		'\x18C', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\x3', '\x2', '\x2', 
		'\x2', '\x18E', '\x190', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\x3', '\x2', '\x2', '\x2', 
		'\x190', '=', '\x3', '\x2', '\x2', '\x2', '\x191', '\x192', '\a', '\x3', 
		'\x2', '\x2', '\x192', '\x193', '\x5', '\xE', '\b', '\x2', '\x193', '\x194', 
		'\a', '\x4', '\x2', '\x2', '\x194', '\x195', '\x5', '<', '\x1F', '\x2', 
		'\x195', '\x196', '\a', '.', '\x2', '\x2', '\x196', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x197', '\x19A', '\x5', '\x44', '#', '\x2', '\x198', '\x19A', 
		'\x5', '<', '\x1F', '\x2', '\x199', '\x197', '\x3', '\x2', '\x2', '\x2', 
		'\x199', '\x198', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x19B', '\x19C', '\a', '\x31', '\x2', '\x2', '\x19C', 
		'\x19D', '\a', '\x12', '\x2', '\x2', '\x19D', '\x19E', '\a', '\x31', '\x2', 
		'\x2', '\x19E', '\x43', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A1', 
		'\a', '\x31', '\x2', '\x2', '\x1A0', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x1A0', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\x3', 
		'\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\a', '\x17', '\x2', '\x2', '\x1A3', 
		'\x1A4', '\a', '\x31', '\x2', '\x2', '\x1A4', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x1A5', '\x1A6', '\a', '\'', '\x2', '\x2', '\x1A6', '\x1A7', '\x5', 
		'H', '%', '\x2', '\x1A7', '\x1A8', '\a', '\x15', '\x2', '\x2', '\x1A8', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AC', '\x5', 'N', '(', '\x2', 
		'\x1AA', '\x1AC', '\x5', 'P', ')', '\x2', '\x1AB', '\x1A9', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AC', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x5', '\x38', '\x1D', '\x2', 
		'\x1AE', 'K', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\x5', 'T', 
		'+', '\x2', '\x1B0', '\x1B1', '\a', '\x1C', '\x2', '\x2', '\x1B1', '\x1B2', 
		'\x5', 'T', '+', '\x2', '\x1B2', 'M', '\x3', '\x2', '\x2', '\x2', '\x1B3', 
		'\x1B4', '\x5', '\x36', '\x1C', '\x2', '\x1B4', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x1B5', '\x1B6', '\x5', 'T', '+', '\x2', '\x1B6', '\x1B7', '\a', 
		'\x13', '\x2', '\x2', '\x1B7', '\x1B8', '\x5', 'L', '\'', '\x2', '\x1B8', 
		'\x1B9', '\a', '\x18', '\x2', '\x2', '\x1B9', '\x1BA', '\x5', 'J', '&', 
		'\x2', '\x1BA', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BC', '\x5', 
		'\x16', '\f', '\x2', '\x1BC', '\x1BD', '\a', '\'', '\x2', '\x2', '\x1BD', 
		'\x1BE', '\a', '\x15', '\x2', '\x2', '\x1BE', 'S', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1C0', '\a', '\x31', '\x2', '\x2', '\x1C0', 'U', '\x3', 
		'\x2', '\x2', '\x2', '&', '\\', '\x61', 'g', 'l', 'n', 'x', '\x82', '\x8B', 
		'\x99', '\x9B', '\xAC', '\xBE', '\xC1', '\xD6', '\xE2', '\xEC', '\xF4', 
		'\x100', '\x10F', '\x118', '\x11E', '\x125', '\x12D', '\x144', '\x14F', 
		'\x16C', '\x16E', '\x173', '\x17E', '\x185', '\x189', '\x18D', '\x18F', 
		'\x199', '\x1A0', '\x1AB',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
