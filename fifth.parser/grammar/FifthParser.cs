//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from fifth.parser/grammar/Fifth.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class FifthParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ALIAS=1, AS=2, ELSE=3, IF=4, WHILE=5, NEW=6, WITH=7, RETURN=8, USE=9, 
		TRUE=10, FALSE=11, ASSIGN=12, CLOSEBRACE=13, CLOSEPAREN=14, COLON=15, 
		COMMA=16, DIVIDE=17, DOT=18, EQ=19, HASH=20, LAMBDASEP=21, MINUS=22, OPENBRACE=23, 
		OPENPAREN=24, PLUS=25, QMARK=26, TIMES=27, PERCENT=28, POWER=29, NEQ=30, 
		GT=31, LT=32, GEQ=33, LEQ=34, AMP=35, AND=36, OR=37, NOT=38, SEMICOLON=39, 
		IDENTIFIER=40, STRING=41, INT=42, FLOAT=43, WS=44;
	public const int
		RULE_fifth = 0, RULE_alias = 1, RULE_block = 2, RULE_boolean = 3, RULE_explist = 4, 
		RULE_exp = 5, RULE_formal_parameters = 6, RULE_function_declaration = 7, 
		RULE_function_args = 8, RULE_function_body = 9, RULE_function_call = 10, 
		RULE_function_name = 11, RULE_function_type = 12, RULE_iri = 13, RULE_qNameIri = 14, 
		RULE_absoluteIri = 15, RULE_iri_query_param = 16, RULE_module_import = 17, 
		RULE_module_name = 18, RULE_packagename = 19, RULE_parameter_declaration = 20, 
		RULE_parameter_type = 21, RULE_parameter_name = 22, RULE_type_initialiser = 23, 
		RULE_type_name = 24, RULE_type_property_init = 25, RULE_var_decl = 26, 
		RULE_var_name = 27;
	public static readonly string[] ruleNames = {
		"fifth", "alias", "block", "boolean", "explist", "exp", "formal_parameters", 
		"function_declaration", "function_args", "function_body", "function_call", 
		"function_name", "function_type", "iri", "qNameIri", "absoluteIri", "iri_query_param", 
		"module_import", "module_name", "packagename", "parameter_declaration", 
		"parameter_type", "parameter_name", "type_initialiser", "type_name", "type_property_init", 
		"var_decl", "var_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'alias'", "'as'", "'else'", "'if'", "'while'", "'new'", "'with'", 
		"'return'", "'use'", "'true'", "'false'", "'='", "'}'", "')'", "':'", 
		"','", "'/'", "'.'", "'=='", "'#'", "'=>'", "'-'", "'{'", "'('", "'+'", 
		"'?'", "'*'", "'%'", "'^'", "'!='", "'>'", "'<'", "'>='", "'<='", "'&'", 
		"'&&'", "'||'", "'!'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ALIAS", "AS", "ELSE", "IF", "WHILE", "NEW", "WITH", "RETURN", "USE", 
		"TRUE", "FALSE", "ASSIGN", "CLOSEBRACE", "CLOSEPAREN", "COLON", "COMMA", 
		"DIVIDE", "DOT", "EQ", "HASH", "LAMBDASEP", "MINUS", "OPENBRACE", "OPENPAREN", 
		"PLUS", "QMARK", "TIMES", "PERCENT", "POWER", "NEQ", "GT", "LT", "GEQ", 
		"LEQ", "AMP", "AND", "OR", "NOT", "SEMICOLON", "IDENTIFIER", "STRING", 
		"INT", "FLOAT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Fifth.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FifthParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FifthParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FifthParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FifthContext : ParserRuleContext {
		public Function_declarationContext _function_declaration;
		public IList<Function_declarationContext> _functions = new List<Function_declarationContext>();
		public Module_importContext[] module_import() {
			return GetRuleContexts<Module_importContext>();
		}
		public Module_importContext module_import(int i) {
			return GetRuleContext<Module_importContext>(i);
		}
		public AliasContext[] alias() {
			return GetRuleContexts<AliasContext>();
		}
		public AliasContext alias(int i) {
			return GetRuleContext<AliasContext>(i);
		}
		public Function_declarationContext[] function_declaration() {
			return GetRuleContexts<Function_declarationContext>();
		}
		public Function_declarationContext function_declaration(int i) {
			return GetRuleContext<Function_declarationContext>(i);
		}
		public FifthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fifth; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFifth(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFifth(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFifth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FifthContext fifth() {
		FifthContext _localctx = new FifthContext(Context, State);
		EnterRule(_localctx, 0, RULE_fifth);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USE) {
				{
				{
				State = 56; module_import();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ALIAS) {
				{
				{
				State = 62; alias();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 68; _localctx._function_declaration = function_declaration();
				_localctx._functions.Add(_localctx._function_declaration);
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public ITerminalNode ALIAS() { return GetToken(FifthParser.ALIAS, 0); }
		public ITerminalNode LT() { return GetToken(FifthParser.LT, 0); }
		public AbsoluteIriContext absoluteIri() {
			return GetRuleContext<AbsoluteIriContext>(0);
		}
		public ITerminalNode GT() { return GetToken(FifthParser.GT, 0); }
		public ITerminalNode AS() { return GetToken(FifthParser.AS, 0); }
		public PackagenameContext packagename() {
			return GetRuleContext<PackagenameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 2, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(ALIAS);
			State = 75; Match(LT);
			State = 76; absoluteIri();
			State = 77; Match(GT);
			State = 78; Match(AS);
			State = 79; packagename();
			State = 80; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPENBRACE() { return GetToken(FifthParser.OPENBRACE, 0); }
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public ITerminalNode CLOSEBRACE() { return GetToken(FifthParser.CLOSEBRACE, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(OPENBRACE);
			State = 83; explist();
			State = 84; Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public IToken value;
		public ITerminalNode TRUE() { return GetToken(FifthParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(FifthParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 6, RULE_boolean);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; _localctx.value = Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; _localctx.value = Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(Context, State);
		EnterRule(_localctx, 8, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; exp(0);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 91; Match(COMMA);
				State = 92; exp(0);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EFuncCallContext : ExpContext {
		public Function_nameContext funcname;
		public ExplistContext args;
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public EFuncCallContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEFuncCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EBoolContext : ExpContext {
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public EBoolContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EVarnameContext : ExpContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public EVarnameContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEVarname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEVarname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEVarname(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseStmtContext : ExpContext {
		public ExpContext condition;
		public BlockContext ifpart;
		public BlockContext elsepart;
		public ITerminalNode IF() { return GetToken(FifthParser.IF, 0); }
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ITerminalNode ELSE() { return GetToken(FifthParser.ELSE, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfElseStmtContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIfElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIfElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EArithNegationContext : ExpContext {
		public ExpContext operand;
		public ITerminalNode MINUS() { return GetToken(FifthParser.MINUS, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public EArithNegationContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEArithNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEArithNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEArithNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithStmtContext : ExpContext {
		public ITerminalNode WITH() { return GetToken(FifthParser.WITH, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EIntContext : ExpContext {
		public IToken value;
		public ITerminalNode INT() { return GetToken(FifthParser.INT, 0); }
		public EIntContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ELTContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode LT() { return GetToken(FifthParser.LT, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ELTContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterELT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitELT(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitELT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EDivContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode DIVIDE() { return GetToken(FifthParser.DIVIDE, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public EDivContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EGEQContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode GEQ() { return GetToken(FifthParser.GEQ, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public EGEQContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEGEQ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEGEQ(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEGEQ(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ELogicNegationContext : ExpContext {
		public ExpContext operand;
		public ITerminalNode NOT() { return GetToken(FifthParser.NOT, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ELogicNegationContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterELogicNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitELogicNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitELogicNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EAndContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode AND() { return GetToken(FifthParser.AND, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public EAndContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EGTContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode GT() { return GetToken(FifthParser.GT, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public EGTContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEGT(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEGT(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEGT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ELEQContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode LEQ() { return GetToken(FifthParser.LEQ, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ELEQContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterELEQ(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitELEQ(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitELEQ(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ETypeCreateInstContext : ExpContext {
		public ITerminalNode NEW() { return GetToken(FifthParser.NEW, 0); }
		public Type_initialiserContext type_initialiser() {
			return GetRuleContext<Type_initialiserContext>(0);
		}
		public ETypeCreateInstContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterETypeCreateInst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitETypeCreateInst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitETypeCreateInst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EWhileContext : ExpContext {
		public ExpContext condition;
		public BlockContext looppart;
		public ITerminalNode WHILE() { return GetToken(FifthParser.WHILE, 0); }
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public EWhileContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDeclStmtContext : ExpContext {
		public Var_declContext decl;
		public Var_declContext var_decl() {
			return GetRuleContext<Var_declContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarDeclStmtContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterVarDeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitVarDeclStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EParenContext : ExpContext {
		public ExpContext innerexp;
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public EParenContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEParen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentStmtContext : ExpContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public AssignmentStmtContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterAssignmentStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitAssignmentStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ESubContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode MINUS() { return GetToken(FifthParser.MINUS, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ESubContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterESub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitESub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitESub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EDoubleContext : ExpContext {
		public IToken value;
		public ITerminalNode FLOAT() { return GetToken(FifthParser.FLOAT, 0); }
		public EDoubleContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEDouble(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEDouble(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EAddContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode PLUS() { return GetToken(FifthParser.PLUS, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public EAddContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EStringContext : ExpContext {
		public IToken value;
		public ITerminalNode STRING() { return GetToken(FifthParser.STRING, 0); }
		public EStringContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EMulContext : ExpContext {
		public ExpContext left;
		public ExpContext right;
		public ITerminalNode TIMES() { return GetToken(FifthParser.TIMES, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public EMulContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterEMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitEMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEMul(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_exp, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				_localctx = new EArithNegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 99; Match(MINUS);
				State = 100; ((EArithNegationContext)_localctx).operand = exp(15);
				}
				break;
			case 2:
				{
				_localctx = new EBoolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 101; boolean();
				}
				break;
			case 3:
				{
				_localctx = new EIntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 102; ((EIntContext)_localctx).value = Match(INT);
				}
				break;
			case 4:
				{
				_localctx = new EDoubleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 103; ((EDoubleContext)_localctx).value = Match(FLOAT);
				}
				break;
			case 5:
				{
				_localctx = new EStringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 104; ((EStringContext)_localctx).value = Match(STRING);
				}
				break;
			case 6:
				{
				_localctx = new WithStmtContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 105; Match(WITH);
				State = 106; exp(0);
				State = 107; block();
				}
				break;
			case 7:
				{
				_localctx = new VarDeclStmtContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 109; ((VarDeclStmtContext)_localctx).decl = var_decl();
				State = 112;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 110; Match(ASSIGN);
					State = 111; exp(0);
					}
					break;
				}
				}
				break;
			case 8:
				{
				_localctx = new AssignmentStmtContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 114; var_name();
				State = 115; Match(ASSIGN);
				State = 116; exp(8);
				}
				break;
			case 9:
				{
				_localctx = new EVarnameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 118; var_name();
				}
				break;
			case 10:
				{
				_localctx = new EFuncCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119; ((EFuncCallContext)_localctx).funcname = function_name();
				State = 120; Match(OPENPAREN);
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << NEW) | (1L << WITH) | (1L << TRUE) | (1L << FALSE) | (1L << MINUS) | (1L << OPENPAREN) | (1L << NOT) | (1L << IDENTIFIER) | (1L << STRING) | (1L << INT) | (1L << FLOAT))) != 0)) {
					{
					State = 121; ((EFuncCallContext)_localctx).args = explist();
					}
				}

				State = 124; Match(CLOSEPAREN);
				}
				break;
			case 11:
				{
				_localctx = new EParenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 126; Match(OPENPAREN);
				State = 127; ((EParenContext)_localctx).innerexp = exp(0);
				State = 128; Match(CLOSEPAREN);
				}
				break;
			case 12:
				{
				_localctx = new ELogicNegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 130; Match(NOT);
				State = 131; ((ELogicNegationContext)_localctx).operand = exp(4);
				}
				break;
			case 13:
				{
				_localctx = new ETypeCreateInstContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 132; Match(NEW);
				State = 133; type_initialiser();
				}
				break;
			case 14:
				{
				_localctx = new IfElseStmtContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 134; Match(IF);
				State = 135; Match(OPENPAREN);
				State = 136; ((IfElseStmtContext)_localctx).condition = exp(0);
				State = 137; Match(CLOSEPAREN);
				State = 138; ((IfElseStmtContext)_localctx).ifpart = block();
				State = 139; Match(ELSE);
				State = 140; ((IfElseStmtContext)_localctx).elsepart = block();
				}
				break;
			case 15:
				{
				_localctx = new EWhileContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 142; Match(WHILE);
				State = 143; Match(OPENPAREN);
				State = 144; ((EWhileContext)_localctx).condition = exp(0);
				State = 145; Match(CLOSEPAREN);
				State = 146; ((EWhileContext)_localctx).looppart = block();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 179;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 177;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ELTContext(new ExpContext(_parentctx, _parentState));
						((ELTContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 150;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 151; Match(LT);
						State = 152; ((ELTContext)_localctx).right = exp(25);
						}
						break;
					case 2:
						{
						_localctx = new EGTContext(new ExpContext(_parentctx, _parentState));
						((EGTContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 153;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 154; Match(GT);
						State = 155; ((EGTContext)_localctx).right = exp(24);
						}
						break;
					case 3:
						{
						_localctx = new ELEQContext(new ExpContext(_parentctx, _parentState));
						((ELEQContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 156;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 157; Match(LEQ);
						State = 158; ((ELEQContext)_localctx).right = exp(23);
						}
						break;
					case 4:
						{
						_localctx = new EGEQContext(new ExpContext(_parentctx, _parentState));
						((EGEQContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 159;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 160; Match(GEQ);
						State = 161; ((EGEQContext)_localctx).right = exp(22);
						}
						break;
					case 5:
						{
						_localctx = new EAndContext(new ExpContext(_parentctx, _parentState));
						((EAndContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 162;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 163; Match(AND);
						State = 164; ((EAndContext)_localctx).right = exp(21);
						}
						break;
					case 6:
						{
						_localctx = new EAddContext(new ExpContext(_parentctx, _parentState));
						((EAddContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 165;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 166; Match(PLUS);
						State = 167; ((EAddContext)_localctx).right = exp(20);
						}
						break;
					case 7:
						{
						_localctx = new ESubContext(new ExpContext(_parentctx, _parentState));
						((ESubContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 168;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 169; Match(MINUS);
						State = 170; ((ESubContext)_localctx).right = exp(19);
						}
						break;
					case 8:
						{
						_localctx = new EMulContext(new ExpContext(_parentctx, _parentState));
						((EMulContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 171;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 172; Match(TIMES);
						State = 173; ((EMulContext)_localctx).right = exp(18);
						}
						break;
					case 9:
						{
						_localctx = new EDivContext(new ExpContext(_parentctx, _parentState));
						((EDivContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 174;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 175; Match(DIVIDE);
						State = 176; ((EDivContext)_localctx).right = exp(17);
						}
						break;
					}
					} 
				}
				State = 181;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Formal_parametersContext : ParserRuleContext {
		public Parameter_declarationContext[] parameter_declaration() {
			return GetRuleContexts<Parameter_declarationContext>();
		}
		public Parameter_declarationContext parameter_declaration(int i) {
			return GetRuleContext<Parameter_declarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Formal_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFormal_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFormal_parameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parametersContext formal_parameters() {
		Formal_parametersContext _localctx = new Formal_parametersContext(Context, State);
		EnterRule(_localctx, 12, RULE_formal_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; parameter_declaration();
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 183; Match(COMMA);
				State = 184; parameter_declaration();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public Function_typeContext result_type;
		public Function_nameContext name;
		public Function_argsContext args;
		public Function_bodyContext body;
		public Function_typeContext function_type() {
			return GetRuleContext<Function_typeContext>(0);
		}
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Function_argsContext function_args() {
			return GetRuleContext<Function_argsContext>(0);
		}
		public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; _localctx.result_type = function_type();
			State = 191; _localctx.name = function_name();
			State = 192; _localctx.args = function_args();
			State = 193; _localctx.body = function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argsContext : ParserRuleContext {
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public Formal_parametersContext formal_parameters() {
			return GetRuleContext<Formal_parametersContext>(0);
		}
		public Function_argsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_args(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_args(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_args(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argsContext function_args() {
		Function_argsContext _localctx = new Function_argsContext(Context, State);
		EnterRule(_localctx, 16, RULE_function_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(OPENPAREN);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 196; formal_parameters();
				}
			}

			State = 199; Match(CLOSEPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		public ITerminalNode LAMBDASEP() { return GetToken(FifthParser.LAMBDASEP, 0); }
		public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_function_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(LAMBDASEP);
			State = 202; explist();
			State = 203; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode OPENPAREN() { return GetToken(FifthParser.OPENPAREN, 0); }
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ITerminalNode CLOSEPAREN() { return GetToken(FifthParser.CLOSEPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 20, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; function_name();
			State = 206; Match(OPENPAREN);
			State = 207; exp(0);
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 208; Match(COMMA);
				State = 209; exp(0);
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 215; Match(CLOSEPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 22, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_typeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Function_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterFunction_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitFunction_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_typeContext function_type() {
		Function_typeContext _localctx = new Function_typeContext(Context, State);
		EnterRule(_localctx, 24, RULE_function_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IriContext : ParserRuleContext {
		public QNameIriContext qNameIri() {
			return GetRuleContext<QNameIriContext>(0);
		}
		public AbsoluteIriContext absoluteIri() {
			return GetRuleContext<AbsoluteIriContext>(0);
		}
		public IriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIri(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IriContext iri() {
		IriContext _localctx = new IriContext(Context, State);
		EnterRule(_localctx, 26, RULE_iri);
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 221; qNameIri();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222; absoluteIri();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QNameIriContext : ParserRuleContext {
		public IToken prefix;
		public IToken fragname;
		public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public QNameIriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qNameIri; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterQNameIri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitQNameIri(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQNameIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QNameIriContext qNameIri() {
		QNameIriContext _localctx = new QNameIriContext(Context, State);
		EnterRule(_localctx, 28, RULE_qNameIri);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 225; _localctx.prefix = Match(IDENTIFIER);
				}
			}

			State = 228; Match(COLON);
			State = 229; _localctx.fragname = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsoluteIriContext : ParserRuleContext {
		public IToken iri_scheme;
		public IToken _IDENTIFIER;
		public IList<IToken> _iri_domain = new List<IToken>();
		public IList<IToken> _iri_segment = new List<IToken>();
		public ITerminalNode COLON() { return GetToken(FifthParser.COLON, 0); }
		public ITerminalNode[] DIVIDE() { return GetTokens(FifthParser.DIVIDE); }
		public ITerminalNode DIVIDE(int i) {
			return GetToken(FifthParser.DIVIDE, i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(FifthParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(FifthParser.DOT, i);
		}
		public ITerminalNode HASH() { return GetToken(FifthParser.HASH, 0); }
		public AbsoluteIriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_absoluteIri; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterAbsoluteIri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitAbsoluteIri(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsoluteIri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbsoluteIriContext absoluteIri() {
		AbsoluteIriContext _localctx = new AbsoluteIriContext(Context, State);
		EnterRule(_localctx, 30, RULE_absoluteIri);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; _localctx.iri_scheme = Match(IDENTIFIER);
			State = 232; Match(COLON);
			State = 233; Match(DIVIDE);
			State = 234; Match(DIVIDE);
			State = 235; _localctx._IDENTIFIER = Match(IDENTIFIER);
			_localctx._iri_domain.Add(_localctx._IDENTIFIER);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 236; Match(DOT);
				State = 237; _localctx._IDENTIFIER = Match(IDENTIFIER);
				_localctx._iri_domain.Add(_localctx._IDENTIFIER);
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 247;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 243; Match(DIVIDE);
					State = 244; _localctx._IDENTIFIER = Match(IDENTIFIER);
					_localctx._iri_segment.Add(_localctx._IDENTIFIER);
					}
					} 
				}
				State = 249;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DIVIDE) {
				{
				State = 250; Match(DIVIDE);
				}
			}

			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH) {
				{
				State = 253; Match(HASH);
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 254; Match(IDENTIFIER);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iri_query_paramContext : ParserRuleContext {
		public IToken name;
		public IToken val;
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(FifthParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(FifthParser.IDENTIFIER, i);
		}
		public Iri_query_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iri_query_param; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterIri_query_param(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitIri_query_param(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIri_query_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iri_query_paramContext iri_query_param() {
		Iri_query_paramContext _localctx = new Iri_query_paramContext(Context, State);
		EnterRule(_localctx, 32, RULE_iri_query_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259; _localctx.name = Match(IDENTIFIER);
			State = 260; Match(ASSIGN);
			State = 261; _localctx.val = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_importContext : ParserRuleContext {
		public ITerminalNode USE() { return GetToken(FifthParser.USE, 0); }
		public Module_nameContext[] module_name() {
			return GetRuleContexts<Module_nameContext>();
		}
		public Module_nameContext module_name(int i) {
			return GetRuleContext<Module_nameContext>(i);
		}
		public ITerminalNode SEMICOLON() { return GetToken(FifthParser.SEMICOLON, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(FifthParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FifthParser.COMMA, i);
		}
		public Module_importContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_import; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterModule_import(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitModule_import(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_import(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_importContext module_import() {
		Module_importContext _localctx = new Module_importContext(Context, State);
		EnterRule(_localctx, 34, RULE_module_import);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(USE);
			State = 264; module_name();
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 265; Match(COMMA);
				State = 266; module_name();
				}
				}
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 272; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 36, RULE_module_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackagenameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public PackagenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packagename; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterPackagename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitPackagename(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackagename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackagenameContext packagename() {
		PackagenameContext _localctx = new PackagenameContext(Context, State);
		EnterRule(_localctx, 38, RULE_packagename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declarationContext : ParserRuleContext {
		public Parameter_typeContext parameter_type() {
			return GetRuleContext<Parameter_typeContext>(0);
		}
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Parameter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterParameter_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitParameter_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declarationContext parameter_declaration() {
		Parameter_declarationContext _localctx = new Parameter_declarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_parameter_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; parameter_type();
			State = 279; parameter_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_typeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Parameter_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterParameter_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitParameter_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_typeContext parameter_type() {
		Parameter_typeContext _localctx = new Parameter_typeContext(Context, State);
		EnterRule(_localctx, 42, RULE_parameter_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Parameter_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterParameter_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitParameter_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_nameContext parameter_name() {
		Parameter_nameContext _localctx = new Parameter_nameContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameter_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_initialiserContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode OPENBRACE() { return GetToken(FifthParser.OPENBRACE, 0); }
		public ITerminalNode CLOSEBRACE() { return GetToken(FifthParser.CLOSEBRACE, 0); }
		public Type_property_initContext[] type_property_init() {
			return GetRuleContexts<Type_property_initContext>();
		}
		public Type_property_initContext type_property_init(int i) {
			return GetRuleContext<Type_property_initContext>(i);
		}
		public Type_initialiserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_initialiser; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterType_initialiser(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitType_initialiser(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_initialiser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_initialiserContext type_initialiser() {
		Type_initialiserContext _localctx = new Type_initialiserContext(Context, State);
		EnterRule(_localctx, 46, RULE_type_initialiser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; type_name();
			State = 286; Match(OPENBRACE);
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 287; type_property_init();
				}
				}
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 293; Match(CLOSEBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 48, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_property_initContext : ParserRuleContext {
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(FifthParser.ASSIGN, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public Type_property_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_property_init; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterType_property_init(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitType_property_init(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_property_init(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_property_initContext type_property_init() {
		Type_property_initContext _localctx = new Type_property_initContext(Context, State);
		EnterRule(_localctx, 50, RULE_type_property_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; var_name();
			State = 298; Match(ASSIGN);
			State = 299; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		public Var_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterVar_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitVar_decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declContext var_decl() {
		Var_declContext _localctx = new Var_declContext(Context, State);
		EnterRule(_localctx, 52, RULE_var_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; type_name();
			State = 302; var_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FifthParser.IDENTIFIER, 0); }
		public Var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.EnterVar_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFifthListener typedListener = listener as IFifthListener;
			if (typedListener != null) typedListener.ExitVar_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFifthVisitor<TResult> typedVisitor = visitor as IFifthVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_nameContext var_name() {
		Var_nameContext _localctx = new Var_nameContext(Context, State);
		EnterRule(_localctx, 54, RULE_var_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 24);
		case 1: return Precpred(Context, 23);
		case 2: return Precpred(Context, 22);
		case 3: return Precpred(Context, 21);
		case 4: return Precpred(Context, 20);
		case 5: return Precpred(Context, 19);
		case 6: return Precpred(Context, 18);
		case 7: return Precpred(Context, 17);
		case 8: return Precpred(Context, 16);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '.', '\x135', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x3', '\x2', '\a', '\x2', '<', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '?', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x42', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x45', '\v', '\x2', '\x3', '\x2', '\a', '\x2', 
		'H', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'K', '\v', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '[', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '`', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', '\x63', '\v', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 's', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '}', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x97', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', '\xB4', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'\xB7', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'\xBC', '\n', '\b', '\f', '\b', '\xE', '\b', '\xBF', '\v', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '\xC8', '\n', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xD5', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '\xD8', '\v', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xE2', '\n', '\xF', '\x3', '\x10', '\x5', 
		'\x10', '\xE5', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xF1', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\xF4', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\xF8', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xFB', 
		'\v', '\x11', '\x3', '\x11', '\x5', '\x11', '\xFE', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x102', '\n', '\x11', '\x5', '\x11', 
		'\x104', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\x10E', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x111', '\v', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\a', '\x19', '\x123', '\n', '\x19', '\f', '\x19', 
		'\xE', '\x19', '\x126', '\v', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x2', '\x3', '\f', '\x1E', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', '\x2', '\x2', '\x2', '\x142', '\x2', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x4', 'L', '\x3', '\x2', '\x2', '\x2', '\x6', 'T', 
		'\x3', '\x2', '\x2', '\x2', '\b', 'Z', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\f', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xB8', '\x3', '\x2', '\x2', '\x2', '\x10', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x14', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xE9', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '$', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x114', '\x3', '\x2', '\x2', '\x2', '(', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x118', '\x3', '\x2', '\x2', '\x2', ',', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x32', '\x129', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x36', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x132', '\x3', '\x2', '\x2', '\x2', 
		':', '<', '\x5', '$', '\x13', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', 
		'<', '?', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\x3', '\x2', '\x2', '\x2', '>', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '@', '\x42', '\x5', '\x4', 
		'\x3', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', 
		'\x5', '\x10', '\t', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 
		'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\x3', '\x2', 
		'\x2', 'M', 'N', '\a', '\"', '\x2', '\x2', 'N', 'O', '\x5', ' ', '\x11', 
		'\x2', 'O', 'P', '\a', '!', '\x2', '\x2', 'P', 'Q', '\a', '\x4', '\x2', 
		'\x2', 'Q', 'R', '\x5', '(', '\x15', '\x2', 'R', 'S', '\a', ')', '\x2', 
		'\x2', 'S', '\x5', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\x19', 
		'\x2', '\x2', 'U', 'V', '\x5', '\n', '\x6', '\x2', 'V', 'W', '\a', '\xF', 
		'\x2', '\x2', 'W', '\a', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\a', '\f', 
		'\x2', '\x2', 'Y', '[', '\a', '\r', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\\', '\x61', '\x5', '\f', '\a', '\x2', ']', '^', 
		'\a', '\x12', '\x2', '\x2', '^', '`', '\x5', '\f', '\a', '\x2', '_', ']', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\v', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\b', '\a', '\x1', '\x2', '\x65', 
		'\x66', '\a', '\x18', '\x2', '\x2', '\x66', '\x97', '\x5', '\f', '\a', 
		'\x11', 'g', '\x97', '\x5', '\b', '\x5', '\x2', 'h', '\x97', '\a', ',', 
		'\x2', '\x2', 'i', '\x97', '\a', '-', '\x2', '\x2', 'j', '\x97', '\a', 
		'+', '\x2', '\x2', 'k', 'l', '\a', '\t', '\x2', '\x2', 'l', 'm', '\x5', 
		'\f', '\a', '\x2', 'm', 'n', '\x5', '\x6', '\x4', '\x2', 'n', '\x97', 
		'\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x5', '\x36', '\x1C', '\x2', 'p', 
		'q', '\a', '\xE', '\x2', '\x2', 'q', 's', '\x5', '\f', '\a', '\x2', 'r', 
		'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 
		's', '\x97', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x5', '\x38', '\x1D', 
		'\x2', 'u', 'v', '\a', '\xE', '\x2', '\x2', 'v', 'w', '\x5', '\f', '\a', 
		'\n', 'w', '\x97', '\x3', '\x2', '\x2', '\x2', 'x', '\x97', '\x5', '\x38', 
		'\x1D', '\x2', 'y', 'z', '\x5', '\x18', '\r', '\x2', 'z', '|', '\a', '\x1A', 
		'\x2', '\x2', '{', '}', '\x5', '\n', '\x6', '\x2', '|', '{', '\x3', '\x2', 
		'\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\a', '\x10', '\x2', '\x2', '\x7F', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\a', '\x1A', '\x2', '\x2', 
		'\x81', '\x82', '\x5', '\f', '\a', '\x2', '\x82', '\x83', '\a', '\x10', 
		'\x2', '\x2', '\x83', '\x97', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', 
		'\a', '(', '\x2', '\x2', '\x85', '\x97', '\x5', '\f', '\a', '\x6', '\x86', 
		'\x87', '\a', '\b', '\x2', '\x2', '\x87', '\x97', '\x5', '\x30', '\x19', 
		'\x2', '\x88', '\x89', '\a', '\x6', '\x2', '\x2', '\x89', '\x8A', '\a', 
		'\x1A', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\f', '\a', '\x2', '\x8B', 
		'\x8C', '\a', '\x10', '\x2', '\x2', '\x8C', '\x8D', '\x5', '\x6', '\x4', 
		'\x2', '\x8D', '\x8E', '\a', '\x5', '\x2', '\x2', '\x8E', '\x8F', '\x5', 
		'\x6', '\x4', '\x2', '\x8F', '\x97', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\a', '\a', '\x2', '\x2', '\x91', '\x92', '\a', '\x1A', '\x2', 
		'\x2', '\x92', '\x93', '\x5', '\f', '\a', '\x2', '\x93', '\x94', '\a', 
		'\x10', '\x2', '\x2', '\x94', '\x95', '\x5', '\x6', '\x4', '\x2', '\x95', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x96', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x96', 'g', '\x3', '\x2', '\x2', '\x2', '\x96', 'h', '\x3', '\x2', 
		'\x2', '\x2', '\x96', 'i', '\x3', '\x2', '\x2', '\x2', '\x96', 'j', '\x3', 
		'\x2', '\x2', '\x2', '\x96', 'k', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x96', 't', '\x3', '\x2', '\x2', '\x2', 
		'\x96', 'x', '\x3', '\x2', '\x2', '\x2', '\x96', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x80', '\x3', '\x2', '\x2', '\x2', '\x96', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x86', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x96', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\f', 
		'\x1A', '\x2', '\x2', '\x99', '\x9A', '\a', '\"', '\x2', '\x2', '\x9A', 
		'\xB4', '\x5', '\f', '\a', '\x1B', '\x9B', '\x9C', '\f', '\x19', '\x2', 
		'\x2', '\x9C', '\x9D', '\a', '!', '\x2', '\x2', '\x9D', '\xB4', '\x5', 
		'\f', '\a', '\x1A', '\x9E', '\x9F', '\f', '\x18', '\x2', '\x2', '\x9F', 
		'\xA0', '\a', '$', '\x2', '\x2', '\xA0', '\xB4', '\x5', '\f', '\a', '\x19', 
		'\xA1', '\xA2', '\f', '\x17', '\x2', '\x2', '\xA2', '\xA3', '\a', '#', 
		'\x2', '\x2', '\xA3', '\xB4', '\x5', '\f', '\a', '\x18', '\xA4', '\xA5', 
		'\f', '\x16', '\x2', '\x2', '\xA5', '\xA6', '\a', '&', '\x2', '\x2', '\xA6', 
		'\xB4', '\x5', '\f', '\a', '\x17', '\xA7', '\xA8', '\f', '\x15', '\x2', 
		'\x2', '\xA8', '\xA9', '\a', '\x1B', '\x2', '\x2', '\xA9', '\xB4', '\x5', 
		'\f', '\a', '\x16', '\xAA', '\xAB', '\f', '\x14', '\x2', '\x2', '\xAB', 
		'\xAC', '\a', '\x18', '\x2', '\x2', '\xAC', '\xB4', '\x5', '\f', '\a', 
		'\x15', '\xAD', '\xAE', '\f', '\x13', '\x2', '\x2', '\xAE', '\xAF', '\a', 
		'\x1D', '\x2', '\x2', '\xAF', '\xB4', '\x5', '\f', '\a', '\x14', '\xB0', 
		'\xB1', '\f', '\x12', '\x2', '\x2', '\xB1', '\xB2', '\a', '\x13', '\x2', 
		'\x2', '\xB2', '\xB4', '\x5', '\f', '\a', '\x13', '\xB3', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xBD', '\x5', '*', '\x16', '\x2', '\xB9', '\xBA', '\a', 
		'\x12', '\x2', '\x2', '\xBA', '\xBC', '\x5', '*', '\x16', '\x2', '\xBB', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xF', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\x5', '\x1A', '\xE', 
		'\x2', '\xC1', '\xC2', '\x5', '\x18', '\r', '\x2', '\xC2', '\xC3', '\x5', 
		'\x12', '\n', '\x2', '\xC3', '\xC4', '\x5', '\x14', '\v', '\x2', '\xC4', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC7', '\a', '\x1A', '\x2', 
		'\x2', '\xC6', '\xC8', '\x5', '\xE', '\b', '\x2', '\xC7', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x10', '\x2', 
		'\x2', '\xCA', '\x13', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', 
		'\x17', '\x2', '\x2', '\xCC', '\xCD', '\x5', '\n', '\x6', '\x2', '\xCD', 
		'\xCE', '\a', ')', '\x2', '\x2', '\xCE', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD0', '\x5', '\x18', '\r', '\x2', '\xD0', '\xD1', '\a', 
		'\x1A', '\x2', '\x2', '\xD1', '\xD6', '\x5', '\f', '\a', '\x2', '\xD2', 
		'\xD3', '\a', '\x12', '\x2', '\x2', '\xD3', '\xD5', '\x5', '\f', '\a', 
		'\x2', '\xD4', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\a', 
		'\x10', '\x2', '\x2', '\xDA', '\x17', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDC', '\a', '*', '\x2', '\x2', '\xDC', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDE', '\a', '*', '\x2', '\x2', '\xDE', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE2', '\x5', '\x1E', '\x10', '\x2', '\xE0', 
		'\xE2', '\x5', ' ', '\x11', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE5', '\a', '*', '\x2', '\x2', '\xE4', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', 
		'\x11', '\x2', '\x2', '\xE7', '\xE8', '\a', '*', '\x2', '\x2', '\xE8', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\a', '*', '\x2', 
		'\x2', '\xEA', '\xEB', '\a', '\x11', '\x2', '\x2', '\xEB', '\xEC', '\a', 
		'\x13', '\x2', '\x2', '\xEC', '\xED', '\a', '\x13', '\x2', '\x2', '\xED', 
		'\xF2', '\a', '*', '\x2', '\x2', '\xEE', '\xEF', '\a', '\x14', '\x2', 
		'\x2', '\xEF', '\xF1', '\a', '*', '\x2', '\x2', '\xF0', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF6', '\a', '\x13', '\x2', '\x2', '\xF6', 
		'\xF8', '\a', '*', '\x2', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xFE', '\a', '\x13', '\x2', '\x2', '\xFD', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x101', '\a', '\x16', '\x2', 
		'\x2', '\x100', '\x102', '\a', '*', '\x2', '\x2', '\x101', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x103', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x106', '\a', '*', '\x2', '\x2', '\x106', 
		'\x107', '\a', '\xE', '\x2', '\x2', '\x107', '\x108', '\a', '*', '\x2', 
		'\x2', '\x108', '#', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\a', 
		'\v', '\x2', '\x2', '\x10A', '\x10F', '\x5', '&', '\x14', '\x2', '\x10B', 
		'\x10C', '\a', '\x12', '\x2', '\x2', '\x10C', '\x10E', '\x5', '&', '\x14', 
		'\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', '\x110', '\x112', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x113', '\a', ')', '\x2', '\x2', '\x113', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x115', '\a', '*', '\x2', '\x2', '\x115', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x116', '\x117', '\a', '*', '\x2', '\x2', '\x117', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x5', ',', '\x17', '\x2', 
		'\x119', '\x11A', '\x5', '.', '\x18', '\x2', '\x11A', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x11B', '\x11C', '\a', '*', '\x2', '\x2', '\x11C', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', '*', '\x2', '\x2', 
		'\x11E', '/', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\x5', '\x32', 
		'\x1A', '\x2', '\x120', '\x124', '\a', '\x19', '\x2', '\x2', '\x121', 
		'\x123', '\x5', '\x34', '\x1B', '\x2', '\x122', '\x121', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\x126', '\x3', '\x2', '\x2', '\x2', '\x124', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x127', '\x3', '\x2', '\x2', '\x2', '\x126', '\x124', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x128', '\a', '\xF', '\x2', '\x2', '\x128', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\a', '*', '\x2', 
		'\x2', '\x12A', '\x33', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', 
		'\x5', '\x38', '\x1D', '\x2', '\x12C', '\x12D', '\a', '\xE', '\x2', '\x2', 
		'\x12D', '\x12E', '\x5', '\f', '\a', '\x2', '\x12E', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x12F', '\x130', '\x5', '\x32', '\x1A', '\x2', '\x130', 
		'\x131', '\x5', '\x38', '\x1D', '\x2', '\x131', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x132', '\x133', '\a', '*', '\x2', '\x2', '\x133', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '=', '\x43', 'I', 'Z', '\x61', 'r', 
		'|', '\x96', '\xB3', '\xB5', '\xBD', '\xC7', '\xD6', '\xE1', '\xE4', '\xF2', 
		'\xF9', '\xFD', '\x101', '\x103', '\x10F', '\x124',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
